<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Curious Efficiency</title><link>https://www.curiousefficiency.org</link><description>Efficiency (a virtue) is the child of laziness and greed (both vices), while
much of our economic activity is devoted to preventing boredom in the idle
time created by increases in efficiency. To be human is to be a strange
creature indeed :)
</description><atom:link href="https://www.curiousefficiency.org/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Fri, 05 Apr 2024 10:55:12 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>What does "x = a + b" mean?</title><link>https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/</link><dc:creator>Alyssa Coghlan</dc:creator><description>&lt;nav class="contents" id="making-sense-of-x-a-b" role="doc-toc"&gt;
&lt;p class="topic-title"&gt;Making sense of "x = a + b"&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#shorthand-notations-and-shared-context" id="toc-entry-1"&gt;Shorthand notations and shared context&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#the-original-shared-context-algebra" id="toc-entry-2"&gt;The original shared context: Algebra&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#the-corresponding-python-context-numbers" id="toc-entry-3"&gt;The corresponding Python context: Numbers&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#another-mathematical-context-matrix-algebra" id="toc-entry-4"&gt;Another mathematical context: Matrix algebra&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#the-corresponding-python-context-numpy-arrays" id="toc-entry-5"&gt;The corresponding Python context: NumPy Arrays&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#python-s-string-concatenation-context" id="toc-entry-6"&gt;Python's string concatenation context&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#python-s-immutable-sequence-concatenation-context" id="toc-entry-7"&gt;Python's immutable sequence concatenation context&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#python-s-mutable-sequence-concatenation-context" id="toc-entry-8"&gt;Python's mutable sequence concatenation context&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#a-brief-digression-back-to-mathematics-multisets" id="toc-entry-9"&gt;A brief digression back to mathematics: Multisets&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#and-back-to-python-once-more-collections-counter" id="toc-entry-10"&gt;And back to Python once more: &lt;code class="docutils literal"&gt;collections.Counter&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#what-does-all-this-have-to-do-with-the-idea-of-dictionary-addition" id="toc-entry-11"&gt;What does all this have to do with the idea of dictionary addition?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;section id="shorthand-notations-and-shared-context"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#toc-entry-1" role="doc-backlink"&gt;Shorthand notations and shared context&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Guido van Rossum recently put together an
&lt;a class="reference external" href="https://neopythonic.blogspot.com/2019/03/why-operators-are-useful.html"&gt;excellent post&lt;/a&gt;
talking about the value of infix binary operators in making certain kinds of
operations easier to reason about correctly.&lt;/p&gt;
&lt;p&gt;The context inspiring that post is a python-ideas discussion regarding the
possibility of adding a shorthand spelling (&lt;code class="docutils literal"&gt;x = a + b&lt;/code&gt;) to Python for the
operation:&lt;/p&gt;
&lt;pre class="literal-block"&gt;x = a.copy()
x.update(b)&lt;/pre&gt;
&lt;p&gt;The PEP for that proposal is still in development, so I'm not going to link to
it directly &lt;a class="footnote-reference brackets" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#footnote-1" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;, but the paragraph above gives the gist of the idea. Guido's
article came in response to the assertion that infix operators don't improve
readability, when we have plenty of empirical evidence to show that they do.&lt;/p&gt;
&lt;p&gt;Where &lt;em&gt;this&lt;/em&gt; article comes from is a key point that Guido's article mentions,
but doesn't emphasise: that those readability benefits rely heavily on
implicitly shared context between the author of an expression and the readers
of that expression.&lt;/p&gt;
&lt;p&gt;Without a previous agreement on the semantics, the only possible general answer
to the question "What does &lt;code class="docutils literal"&gt;x = a + b&lt;/code&gt; mean?" is "I need more information to
answer that".&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-original-shared-context-algebra"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#toc-entry-2" role="doc-backlink"&gt;The original shared context: Algebra&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If the additional information supplied is "This is an algebraic expression",
then &lt;code class="docutils literal"&gt;x = a + b&lt;/code&gt; is expressing a constraint on the permitted values of &lt;code class="docutils literal"&gt;x&lt;/code&gt;,
&lt;code class="docutils literal"&gt;a&lt;/code&gt;, and &lt;code class="docutils literal"&gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Specifying &lt;code class="docutils literal"&gt;x = a - b&lt;/code&gt; as an additional constraint would then further allow
the reader to infer that &lt;code class="docutils literal"&gt;x = a&lt;/code&gt; and &lt;code class="docutils literal"&gt;b = 0&lt;/code&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-corresponding-python-context-numbers"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#toc-entry-3" role="doc-backlink"&gt;The corresponding Python context: Numbers&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The use case for &lt;code class="docutils literal"&gt;+&lt;/code&gt; in Python that most closely corresponds with algebra is
using it with numbers - the key differences lie in the meaning of &lt;code class="docutils literal"&gt;=&lt;/code&gt;, rather
than the meaning of &lt;code class="docutils literal"&gt;+&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So if the additional information supplied is "This is a Python assignment
statement; &lt;code class="docutils literal"&gt;a&lt;/code&gt; and &lt;code class="docutils literal"&gt;b&lt;/code&gt; are both well-behaved finite numbers", then the
reader will be able to infer that &lt;code class="docutils literal"&gt;x&lt;/code&gt; will be the sum of the two numbers.&lt;/p&gt;
&lt;p&gt;Inferring the exact numeric type of &lt;code class="docutils literal"&gt;x&lt;/code&gt; would require yet more information
about the types of &lt;code class="docutils literal"&gt;a&lt;/code&gt; and &lt;code class="docutils literal"&gt;b&lt;/code&gt;, as types implementing the numeric &lt;code class="docutils literal"&gt;+&lt;/code&gt;
operator are expected to participate in a type coercion protocol that gives
both operands a chance to carry out the operation, and only raises &lt;code class="docutils literal"&gt;TypeError&lt;/code&gt;
if neither type understands the other.&lt;/p&gt;
&lt;p&gt;The original algebraic meaning then gets expressed in Python as
&lt;code class="docutils literal"&gt;assert x == a + b&lt;/code&gt;, and successful execution of the assignment statement
ensures that assertion will pass.&lt;/p&gt;
&lt;p&gt;In this context, types implementing the &lt;code class="docutils literal"&gt;+&lt;/code&gt; operator are expected to provide
all the properties that would be expected of the corresponding mathematical
concepts (&lt;code class="docutils literal"&gt;a + b == b + a&lt;/code&gt;, &lt;code class="docutils literal"&gt;a + (b + c)Â  == (a + b) + c&lt;/code&gt;, etc), subject
to the limitations of performing calculations on computers that actually exist.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="another-mathematical-context-matrix-algebra"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#toc-entry-4" role="doc-backlink"&gt;Another mathematical context: Matrix algebra&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If the given expression used uppercase letters, as in &lt;code class="docutils literal"&gt;X = A + B&lt;/code&gt;, then the
additional information supplied may instead be "This is a matrix algebra
expression". (It's a notational convention in mathematics that matrices be
assigned uppercase letters, while lowercase letters indicate scalar values)&lt;/p&gt;
&lt;p&gt;For matrices, addition and subtraction are defined as only being valid between
matrices of the same size and shape, so if &lt;code class="docutils literal"&gt;X = A - B&lt;/code&gt; were to be supplied as
an additional constraint, then the implications would be:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;X&lt;/code&gt;, &lt;code class="docutils literal"&gt;A&lt;/code&gt; and &lt;code class="docutils literal"&gt;B&lt;/code&gt; are all the same size and shape&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;B&lt;/code&gt; consists entirely of zeroes&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal"&gt;X = A&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="the-corresponding-python-context-numpy-arrays"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#toc-entry-5" role="doc-backlink"&gt;The corresponding Python context: NumPy Arrays&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;numpy.ndarray&lt;/code&gt; type, and other types implementing the same API, bring the
semantics of matrix algebra to Python programming, similar to the way that the
builtin numeric types bring the semantics of scalar algebra.&lt;/p&gt;
&lt;p&gt;This means that if the additional information supplied is "This is a Python
assignment statement; &lt;code class="docutils literal"&gt;A&lt;/code&gt; and &lt;code class="docutils literal"&gt;B&lt;/code&gt; are both matrices of the same size and
shape containing well-behaved finite numbers", then the reader will be able to
infer that &lt;code class="docutils literal"&gt;X&lt;/code&gt; will be a new matrix of the same shape and size as matrices
&lt;code class="docutils literal"&gt;A&lt;/code&gt; and &lt;code class="docutils literal"&gt;B&lt;/code&gt;, with each element in &lt;code class="docutils literal"&gt;X&lt;/code&gt; being the sum of the corresponding
elements in &lt;code class="docutils literal"&gt;A&lt;/code&gt; and &lt;code class="docutils literal"&gt;B&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As with scalar algebra, inferring the exact numeric type of the elements of
&lt;code class="docutils literal"&gt;X&lt;/code&gt; would require more information about the types of the elements in &lt;code class="docutils literal"&gt;A&lt;/code&gt;
and &lt;code class="docutils literal"&gt;B&lt;/code&gt;, the original algebraic meaning gets expressed in Python as
&lt;code class="docutils literal"&gt;assert X == A + B&lt;/code&gt;, successful execution of the assignment statement
ensures that assertion will pass, and types implementing &lt;code class="docutils literal"&gt;+&lt;/code&gt; in this context
are expected to provide the properties that would be expected of a matrix in
mathematics.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="python-s-string-concatenation-context"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#toc-entry-6" role="doc-backlink"&gt;Python's string concatenation context&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Mathematics doesn't provide a convenient infix notation for concatenating two
strings together (aside from writing their names directly next to each other),
so programming language designers are forced to choose one.&lt;/p&gt;
&lt;p&gt;While this does vary across languages, the most common choice is the one that
Python uses: the &lt;code class="docutils literal"&gt;+&lt;/code&gt; operator.&lt;/p&gt;
&lt;p&gt;This is formally a distinct operation from numeric addition, with different
semantic expectations, and CPython's C API somewhat coincidentally ended up
reflecting that distinction by offering two different ways of implementing
&lt;code class="docutils literal"&gt;+&lt;/code&gt; on a type: the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;tp_number-&amp;gt;nb_add&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;tp_sequence-&amp;gt;sq_concat&lt;/span&gt;&lt;/code&gt; slots.
(This distinction is absent at the Python level: only &lt;code class="docutils literal"&gt;__add__&lt;/code&gt;, &lt;code class="docutils literal"&gt;__radd__&lt;/code&gt;
and &lt;code class="docutils literal"&gt;__iadd__&lt;/code&gt; are exposed, and they always populate the relevant
&lt;code class="docutils literal"&gt;tp_number&lt;/code&gt; slots in CPython)&lt;/p&gt;
&lt;p&gt;The key semantic difference between algebraic addition and string concatenation is
that in algebraic addition, the order of the operands doesn't matter
(&lt;code class="docutils literal"&gt;a + b == b + a&lt;/code&gt;), while in the string concatenation case, the order of the
operands determines which items appear first in the result (e.g.
&lt;code class="docutils literal"&gt;"Hello" + "World" == "HelloWorld"&lt;/code&gt; vs &lt;code class="docutils literal"&gt;"World" + "Hello" == "WorldHello"&lt;/code&gt;).
This means that &lt;code class="docutils literal"&gt;a + b == b + a&lt;/code&gt; being true when concatenating strings
indicates that either one or both strings are empty, or else the two strings are
identical.&lt;/p&gt;
&lt;p&gt;Another less obvious semantic difference is that strings don't participate in
the type coercion protocol that is defined for numbers: if the right hand
operand isn't a string (or string subclass) instance, they'll raise
&lt;code class="docutils literal"&gt;TypeError&lt;/code&gt; immediately, rather than letting the other operand attempt the
operation.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="python-s-immutable-sequence-concatenation-context"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#toc-entry-7" role="doc-backlink"&gt;Python's immutable sequence concatenation context&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python goes further than merely allowing &lt;code class="docutils literal"&gt;+&lt;/code&gt; to be used for string
concatenation: it allows it to be used for arbitrary sequence concatenation.&lt;/p&gt;
&lt;p&gt;For immutable container types like &lt;code class="docutils literal"&gt;tuple&lt;/code&gt;, this closely parallels the way
that string concatenation works: a new immutable instance of the same type is
created containing references to the same items referenced by the original
operands:&lt;/p&gt;
&lt;pre class="literal-block"&gt;&amp;gt;&amp;gt;&amp;gt; a = 1, 2, 3
&amp;gt;&amp;gt;&amp;gt; b = 4, 5, 6
&amp;gt;&amp;gt;&amp;gt; x = a + b
&amp;gt;&amp;gt;&amp;gt; a
(1, 2, 3)
&amp;gt;&amp;gt;&amp;gt; b
(4, 5, 6)
&amp;gt;&amp;gt;&amp;gt; x
(1, 2, 3, 4, 5, 6)&lt;/pre&gt;
&lt;p&gt;As for strings, immutable sequences will usually only interact with other
instances of the same type (or subclasses), even when the &lt;code class="docutils literal"&gt;x += b&lt;/code&gt; notation
is used as an alternative to &lt;code class="docutils literal"&gt;x = x + b&lt;/code&gt;. For example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;&amp;gt;&amp;gt;&amp;gt; x = 1, 2, 3
&amp;gt;&amp;gt;&amp;gt; x += [4, 5, 6]
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
TypeError: can only concatenate tuple (not "list") to tuple
&amp;gt;&amp;gt;&amp;gt; x += 4, 5, 6
&amp;gt;&amp;gt;&amp;gt; x
(1, 2, 3, 4, 5, 6)&lt;/pre&gt;
&lt;p&gt;In addition to &lt;code class="docutils literal"&gt;str&lt;/code&gt;, the &lt;code class="docutils literal"&gt;tuple&lt;/code&gt;, and &lt;code class="docutils literal"&gt;bytes&lt;/code&gt; types implement these
concatenation semantics. &lt;code class="docutils literal"&gt;range&lt;/code&gt; and &lt;code class="docutils literal"&gt;memoryview&lt;/code&gt;, while otherwise
implementing the &lt;code class="docutils literal"&gt;Sequence&lt;/code&gt; API, don't support concatenation operations.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="python-s-mutable-sequence-concatenation-context"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#toc-entry-8" role="doc-backlink"&gt;Python's mutable sequence concatenation context&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Mutable sequence types add yet another variation to the possible meanings of
&lt;code class="docutils literal"&gt;+&lt;/code&gt; in Python. For the specific example of &lt;code class="docutils literal"&gt;x = a + b&lt;/code&gt;, they're very similar
to immutable sequences, creating a fresh instance that references the same items
as the original operands:&lt;/p&gt;
&lt;pre class="literal-block"&gt;&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; b = [4, 5, 6]
&amp;gt;&amp;gt;&amp;gt; x = a + b
&amp;gt;&amp;gt;&amp;gt; a
[1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; b
[4, 5, 6]
&amp;gt;&amp;gt;&amp;gt; x
[1, 2, 3, 4, 5, 6]&lt;/pre&gt;
&lt;p&gt;Where they diverge is that the &lt;code class="docutils literal"&gt;x += b&lt;/code&gt; operation will modify the target
sequence directly, rather than creating a new container:&lt;/p&gt;
&lt;pre class="literal-block"&gt;&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; b = [4, 5, 6]
&amp;gt;&amp;gt;&amp;gt; x = a; x = x + b
&amp;gt;&amp;gt;&amp;gt; a
[1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; x = a; x += b
&amp;gt;&amp;gt;&amp;gt; a
[1, 2, 3, 4, 5, 6]&lt;/pre&gt;
&lt;p&gt;The other difference is that where &lt;code class="docutils literal"&gt;+&lt;/code&gt; remains restrictive as to the
container types it will work with, &lt;code class="docutils literal"&gt;+=&lt;/code&gt; is typically generalised to work
with arbitrary iterables on the right hand side, just like the
&lt;code class="docutils literal"&gt;MutableMapping.extend()&lt;/code&gt; method:&lt;/p&gt;
&lt;pre class="literal-block"&gt;&amp;gt;&amp;gt;&amp;gt; x = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; x = x + (4, 5, 6)
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
TypeError: can only concatenate list (not "tuple") to list
&amp;gt;&amp;gt;&amp;gt; x += (4, 5, 6)
&amp;gt;&amp;gt;&amp;gt; x
[1, 2, 3, 4, 5, 6]&lt;/pre&gt;
&lt;p&gt;Amongst the builtins, &lt;code class="docutils literal"&gt;list&lt;/code&gt; and &lt;code class="docutils literal"&gt;bytearray&lt;/code&gt; implement these semantics
(although &lt;code class="docutils literal"&gt;bytearray&lt;/code&gt; limits even in-place concatenation to &lt;code class="docutils literal"&gt;bytes&lt;/code&gt;-like
types that support &lt;code class="docutils literal"&gt;memoryview&lt;/code&gt; style access). Elsewhere in the standard
library, &lt;code class="docutils literal"&gt;collections.deque&lt;/code&gt; and &lt;code class="docutils literal"&gt;array.array&lt;/code&gt; are other mutable sequence
types that behave this way.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="a-brief-digression-back-to-mathematics-multisets"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#toc-entry-9" role="doc-backlink"&gt;A brief digression back to mathematics: Multisets&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Multisets are a concept in mathematics that allow for values to occur in a set
more than once, with the multiset then being the mapping from the values
themselves to the count of how many times that value occurs in the multiset
(with a count of zero or less being the same as the value being omitted from
the set entirely).&lt;/p&gt;
&lt;p&gt;While they don't natively use the &lt;code class="docutils literal"&gt;x = a + b&lt;/code&gt; notation the way that scalar
algebra and matrix algebra do, the key point regarding multisets that's relevant
to this article is the fact that they do have a "Sum" operation defined, and the
semantics of that operation are very similar to those used for matrix addition:
element wise summation for each item in the multiset. If a particular value is
only present in one of the multisets, that's handled the same way as if it were
present with a count of zero.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="and-back-to-python-once-more-collections-counter"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#toc-entry-10" role="doc-backlink"&gt;And back to Python once more: &lt;code class="docutils literal"&gt;collections.Counter&lt;/code&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since Python 2.7 and 3.1, Python has included an implementation of the
mathematical multiset concept in the form of the &lt;code class="docutils literal"&gt;collections.Counter&lt;/code&gt; class.
It uses &lt;code class="docutils literal"&gt;x = a + b&lt;/code&gt; to denote multiset summation:&lt;/p&gt;
&lt;pre class="literal-block"&gt;&amp;gt;&amp;gt;&amp;gt; a = collections.Counter(maths=2, python=2)
&amp;gt;&amp;gt;&amp;gt; b = collections.Counter(python=4, maths=1)
&amp;gt;&amp;gt;&amp;gt; x = a + b
&amp;gt;&amp;gt;&amp;gt; x
Counter({'python': 6, 'maths': 3})&lt;/pre&gt;
&lt;p&gt;As with sequences, counter instances define their own interoperability domain,
so they won't accept arbitrary mappings for a binary &lt;code class="docutils literal"&gt;+&lt;/code&gt; operation:&lt;/p&gt;
&lt;pre class="literal-block"&gt;&amp;gt;&amp;gt;&amp;gt; x = a + dict(python=4, maths=1)
Traceback (most recent call last):
  File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;
TypeError: unsupported operand type(s) for +: 'Counter' and 'dict'&lt;/pre&gt;
&lt;p&gt;But they're more permissive for in-place operations, accepting arbitrary
mapping objects:&lt;/p&gt;
&lt;pre class="literal-block"&gt;&amp;gt;&amp;gt;&amp;gt; x += dict(python=4, maths=1)
&amp;gt;&amp;gt;&amp;gt; x
Counter({'python': 10, 'maths': 4})&lt;/pre&gt;
&lt;/section&gt;
&lt;section id="what-does-all-this-have-to-do-with-the-idea-of-dictionary-addition"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#toc-entry-11" role="doc-backlink"&gt;What does all this have to do with the idea of dictionary addition?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python's dictionaries are quite interesting mathematically, as in mathematical
terms, they're not actually a container. Instead, they're a function mapping
between a domain defined by the set of keys, and a range defined by a multiset
of values &lt;a class="footnote-reference brackets" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#footnote-2" id="footnote-reference-2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This means that the mathematical context that would most closely correspond to
defining addition on dictionaries is the algebraic combination of functions.
That's defined such that &lt;code class="docutils literal"&gt;(f + &lt;span class="pre"&gt;g)(x)&lt;/span&gt;&lt;/code&gt; is equivalent to &lt;code class="docutils literal"&gt;f(x) + g(x)&lt;/code&gt;, so
the only binary in-fix operator support for dictionaries that could be grounded
in an existing mathematical shared context is one where &lt;code class="docutils literal"&gt;d1 + d2&lt;/code&gt; was
shorthand for:&lt;/p&gt;
&lt;pre class="literal-block"&gt;x = d1.copy()
for k, rhs in d2.items():
    try:
        lhs = x[k]
    except KeyError:
        x[k] = rhs
    else:
        x[k] = lhs + rhs&lt;/pre&gt;
&lt;p&gt;That has the unfortunate implication that introducing a Python-specific binary
operator shorthand for dictionary copy-and-update semantics would represent a
hard conceptual break with mathematics, rather than a transfer of existing
mathematical concepts into the language. Contrast that with the introduction
of &lt;code class="docutils literal"&gt;collections.Counter&lt;/code&gt; (which was grounded in the semantics of mathematical
multisets and borrowed its Python notation from element-wise addition on
matrices), or the matrix multiplication operator (which was grounded in the
semantics of matrix algebra, and only needed a text-editor-friendly symbol
assigned, similar to using &lt;code class="docutils literal"&gt;*&lt;/code&gt; instead of &lt;code class="docutils literal"&gt;Ã&lt;/code&gt; for scalar multiplication
and &lt;code class="docutils literal"&gt;/&lt;/code&gt; instead of &lt;code class="docutils literal"&gt;Ã·&lt;/code&gt; for division),&lt;/p&gt;
&lt;p&gt;At least to me, that seems like a big leap to take for something where the
in-place form already has a perfectly acceptable spelling (&lt;code class="docutils literal"&gt;d1.update(d2)&lt;/code&gt;),
and a more expression-friendly variant could be provided as a new dictionary
class method:&lt;/p&gt;
&lt;pre class="literal-block"&gt;@classmethod
def from_merge(cls, *inputs):
    self = cls()
    for input in inputs:
        self.update(input)
    return self&lt;/pre&gt;
&lt;p&gt;With that defined, then the exact equivalent of the proposed &lt;code class="docutils literal"&gt;d1 + d2&lt;/code&gt; would
be &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;type(d1).from_merge(d1,&lt;/span&gt; d2)&lt;/code&gt;, and in practice, you would often give the
desired result type explicitly rather than inferring it from the inputs
(e.g. &lt;code class="docutils literal"&gt;dict.from_merge(d1, d2)&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;However, the PEP is still in the very first stage of the discussion and review
process, so it's entirely possible that by the time it reaches &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;python-dev&lt;/span&gt;&lt;/code&gt;
it will be making a more modest proposal like a new &lt;code class="docutils literal"&gt;dict&lt;/code&gt; class method,
rather than the current proposal of operator syntax support.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="footnote-1" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;The whole point of the python-ideas phase of discussion is to get a PEP
ready for a more critical review by the core development team, so it isn't
fair to the PEP author to invite wider review before they're ready for it.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="footnote-2" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/#footnote-reference-2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;The final section originally stated that arithmetic operations on
mathematical functions didn't have a defined meaning, so proposing them for
Python's dictionaries would be treading new conceptual ground. However, a
&lt;a class="reference external" href="https://twitter.com/deshipu/status/1107020770495086599"&gt;reader pointed out&lt;/a&gt;
that algebraic operations on functions &lt;em&gt;are&lt;/em&gt; defined, and they translate to
applying the functions independently to the inputs, and then performing the
specified arithmetic operation on the results. The final section has been
updated accordingly.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;</description><category>python</category><guid>https://www.curiousefficiency.org/posts/2019/03/what-does-x-equals-a-plus-b-mean/</guid><pubDate>Sat, 16 Mar 2019 06:06:21 GMT</pubDate></item><item><title>Considering Python's Target Audience</title><link>https://www.curiousefficiency.org/posts/2017/10/considering-pythons-target-audience/</link><dc:creator>Alyssa Coghlan</dc:creator><description>&lt;nav class="contents" id="who-is-python-being-designed-for" role="doc-toc"&gt;
&lt;p class="topic-title"&gt;Who is Python being designed for?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2017/10/considering-pythons-target-audience/#use-cases-for-python-s-reference-interpreter" id="toc-entry-1"&gt;Use cases for Python's reference interpreter&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2017/10/considering-pythons-target-audience/#which-audience-does-cpython-primarily-serve" id="toc-entry-2"&gt;Which audience does CPython primarily serve?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2017/10/considering-pythons-target-audience/#why-is-this-relevant-to-anything" id="toc-entry-3"&gt;Why is this relevant to anything?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2017/10/considering-pythons-target-audience/#where-does-pypi-fit-into-the-picture" id="toc-entry-4"&gt;Where does PyPI fit into the picture?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2017/10/considering-pythons-target-audience/#why-are-some-apis-changed-when-adding-them-to-the-standard-library" id="toc-entry-5"&gt;Why are some APIs changed when adding them to the standard library?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2017/10/considering-pythons-target-audience/#why-are-some-apis-added-in-provisional-form" id="toc-entry-6"&gt;Why are some APIs added in provisional form?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2017/10/considering-pythons-target-audience/#why-are-only-some-standard-library-apis-upgraded" id="toc-entry-7"&gt;Why are only some standard library APIs upgraded?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2017/10/considering-pythons-target-audience/#will-any-parts-of-the-standard-library-ever-be-independently-versioned" id="toc-entry-8"&gt;Will any parts of the standard library ever be independently versioned?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2017/10/considering-pythons-target-audience/#why-do-these-considerations-matter" id="toc-entry-9"&gt;Why do these considerations matter?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;p&gt;Several years ago, I
&lt;a class="reference external" href="http://www.curiousefficiency.org/posts/2011/04/musings-on-culture-of-python-dev/"&gt;highlighted&lt;/a&gt;
"CPython moves both too fast and too slowly" as one of the more common causes
of conflict both within the python-dev mailing list, as well as between the
active CPython core developers and folks that decide that participating in
that process wouldn't be an effective use of their personal time and energy.&lt;/p&gt;
&lt;p&gt;I still consider that to be the case, but it's also a point I've spent a lot
of time reflecting on in the intervening years, as I wrote that original article
while I was still working for Boeing Defence Australia. The following month,
I left Boeing for Red Hat Asia-Pacific, and started gaining a redistributor
level perspective on
&lt;a class="reference external" href="http://community.redhat.com/blog/2015/02/the-quid-pro-quo-of-open-infrastructure/"&gt;open source supply chain management&lt;/a&gt;
in large enterprises.&lt;/p&gt;
&lt;section id="use-cases-for-python-s-reference-interpreter"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2017/10/considering-pythons-target-audience/#toc-entry-1" role="doc-backlink"&gt;Use cases for Python's reference interpreter&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While it's a gross oversimplification, I tend to break down CPython's use cases
as follows (note that these categories aren't fully distinct, they're just
aimed at focusing my thinking on different factors influencing the rollout of
new software features and versions):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Education: educator's main interest is in teaching ways of modelling and
manipulating the world computationally, &lt;em&gt;not&lt;/em&gt; writing or maintaining
production software). Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Australia's &lt;a class="reference external" href="https://aca.edu.au/#home-unpack"&gt;Digital Curriculum&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lorena A. Barba's &lt;a class="reference external" href="https://github.com/barbagroup/AeroPython"&gt;AeroPython&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Personal automation &amp;amp; hobby projects: software where the main, and often only,
user is the individual that wrote it. Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;my Digital Blasphemy
&lt;a class="reference external" href="https://nbviewer.jupyter.org/urls/bitbucket.org/ncoghlan/misc/raw/default/notebooks/Digital%20Blasphemy.ipynb"&gt;image download notebook&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Paul Fenwick's (Inter)National &lt;a class="reference external" href="https://github.com/pjf/rickastley"&gt;Rick Astley Hotline&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Organisational process automation: software where the main, and often only,
user is the organisation it was originally written to benefit. Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CPython's &lt;a class="reference external" href="https://github.com/python/core-workflow"&gt;core workflow tools&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Development, build &amp;amp; release management tooling for Linux distros&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Set-and-forget infrastructure: software where, for sometimes debatable
reasons, in-life upgrades to the software itself are nigh impossible, but
upgrades to the underlying platform may be feasible. Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;most self-managed corporate and institutional infrastructure (where properly
funded sustaining engineering plans are disturbingly rare)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;grant funded software (where maintenance typically ends when the initial
grant runs out)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;software with strict certification requirements (where recertification is
too expensive for routine updates to be economically viable unless
absolutely essential)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Embedded software systems without auto-upgrade capabilities&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Continuously upgraded infrastructure: software with a robust sustaining
engineering model, where dependency and platform upgrades are considered
routine, and no more concerning than any other code change. Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Facebook's Python service infrastructure&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rolling release Linux distributions&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;most public PaaS and serverless environments (Heroku, OpenShift, AWS Lambda,
Google Cloud Functions, Azure Cloud Functions, etc)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Intermittently upgraded standard operating environments: environments that do
carry out routine upgrades to their core components, but those upgrades occur
on a cycle measured in years, rather than weeks or months. Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.vfxplatform.com/"&gt;VFX Platform&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;LTS Linux distributions&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CPython and the Python standard library&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Infrastructure management &amp;amp; orchestration tools (e.g. OpenStack, Ansible)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hardware control systems&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ephemeral software: software that tends to be used once and then discarded
or ignored, rather than being subsequently upgraded in place. Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ad hoc automation scripts&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Single-player games with a defined "end" (once you've finished them, even
if you forget to uninstall them, you probably won't reinstall them on a new
device)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Single-player games with little or no persistent state (if you uninstall and
reinstall them, it doesn't change much about your play experience)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Event-specific applications (the application was tied to a specific physical
event, and once the event is over, that app doesn't matter any more)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Regular use applications: software that tends to be regularly upgraded after
deployment. Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Business management software&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Personal &amp;amp; professional productivity applications (e.g. Blender)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Developer tools &amp;amp; services (e.g. Mercurial, Buildbot, Roundup)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Multi-player games, and other games with significant persistent state, but
no real defined "end"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Embedded software systems with auto-upgrade capabilities&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Shared abstraction layers: software components that are designed to make it
possible to work effectively in a particular problem domain even if you don't
personally grasp all the intricacies of that domain yet. Examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;most runtime libraries and frameworks fall into this category (e.g. Django,
Flask, Pyramid, SQL Alchemy, NumPy, SciPy, requests)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;many testing and type inference tools also fit here (e.g. pytest,
Hypothesis, vcrpy, behave, mypy)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;plugins for other applications (e.g. Blender plugins, OpenStack hardware
adapters)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the standard library itself represents the baseline "world according to
Python" (and that's an
&lt;a class="reference external" href="http://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python.html#broadening-our-horizons"&gt;incredibly complex&lt;/a&gt;
world view)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="which-audience-does-cpython-primarily-serve"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2017/10/considering-pythons-target-audience/#toc-entry-2" role="doc-backlink"&gt;Which audience does CPython primarily serve?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ultimately, the main audiences that CPython and the standard library specifically
serve are those that, for whatever reason, aren't adequately served by the
combination of a more limited standard library and the installation of
explicitly declared third party dependencies from PyPI.&lt;/p&gt;
&lt;p&gt;To oversimplify the above review of different usage and deployment models even
further, it's possible to summarise the single largest split in Python's user
base as the one between those that are using Python as a &lt;em&gt;scripting language&lt;/em&gt;
for some environment of interest, and those that are using it as an &lt;em&gt;application
development language&lt;/em&gt;, where the eventual artifact that will be distributed is
something other than the script that they're working on.&lt;/p&gt;
&lt;p&gt;Typical developer behaviours when using Python as a scripting language include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;the main working unit consists of a single Python file (or Jupyter notebook!),
rather than a directory of Python and metadata files&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;there's no separate build step of any kind - the script is distributed &lt;em&gt;as&lt;/em&gt; a
script, similar to the way standalone shell scripts are distributed&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;there's no separate install step (other than downloading the file to an
appropriate location), as it is expected that the required runtime environment
will be preconfigured on the destination system&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;no explicit dependencies stated, except perhaps a minimum Python version,
or else a statement of the expected execution environment. If dependencies
outside the standard library are needed, they're expected to be provided by
the environment being scripted (whether that's an operating system,
a data analysis platform, or an application that embeds a Python runtime)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;no separate test suite, with the main test of correctness being "Did the
script do what you wanted it to do with the input that you gave it?"&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if testing prior to live execution is needed, it will be in the form of a
"dry run" or "preview" mode that conveys to the user what the software &lt;em&gt;would&lt;/em&gt;
do if run that way&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;if static code analysis tools are used at all, it's via integration into the
user's software development environment, rather than being set up separately
for each individual script&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By contrast, typical developer behaviours when using Python as an application
development language include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;the main working unit consists of a directory of Python and metadata files,
rather than a single Python file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;these is a separate build step to prepare the application for publication,
even if it's just bundling the files together into a Python sdist, wheel
or zipapp archive&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;whether there's a separate install step to prepare the application for use
will depend on how the application is packaged, and what the supported target
environments are&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;external dependencies are expressed in a metadata file, either directly in
the project directory (e.g. &lt;code class="docutils literal"&gt;pyproject.toml&lt;/code&gt;, &lt;code class="docutils literal"&gt;requirements.txt&lt;/code&gt;,
&lt;code class="docutils literal"&gt;Pipfile&lt;/code&gt;), or as part of the generated publication archive (e.g.
&lt;code class="docutils literal"&gt;setup.py&lt;/code&gt;, &lt;code class="docutils literal"&gt;flit.ini&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a separate test suite exists, either as unit tests for the Python API,
integration tests for the functional interfaces, or a combination of the two&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;usage of static analysis tools is configured at the project level as part of
its testing regime, rather than being dependent on&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a result of that split, the main purpose that CPython and the standard
library end up serving is to define the redistributor independent baseline
of assumed functionality for educational and ad hoc Python scripting
environments 3-5 years after the corresponding CPython feature release.&lt;/p&gt;
&lt;p&gt;For ad hoc scripting use cases, that 3-5 year latency stems from a combination
of delays in redistributors making new releases available to their users, and
users of those redistributed versions taking time to revise their standard
operating environments.&lt;/p&gt;
&lt;p&gt;In the case of educational environments, educators need that kind of time to
review the new features and decide whether or not to incorporate them into the
courses they offer their students.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="why-is-this-relevant-to-anything"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2017/10/considering-pythons-target-audience/#toc-entry-3" role="doc-backlink"&gt;Why is this relevant to anything?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This post was largely inspired by the Twitter discussion following on from
&lt;a class="reference external" href="https://twitter.com/ncoghlan_dev/status/916994106819088384"&gt;this comment of mine&lt;/a&gt;
citing the Provisional API status defined in
&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0411/"&gt;PEP 411&lt;/a&gt; as an example of an
open source project issuing a de facto invitation to users to participate more
actively in the design &amp;amp; development process as co-creators, rather than only
passively consuming already final designs.&lt;/p&gt;
&lt;p&gt;The responses included several expressions of frustration regarding the difficulty
of supporting provisional APIs in higher level libraries, without those libraries
making the provisional status transitive, and hence limiting support for any
related features to only the latest version of the provisional API, and not any
of the earlier iterations.&lt;/p&gt;
&lt;p&gt;My &lt;a class="reference external" href="https://twitter.com/ncoghlan_dev/status/917092464355241984"&gt;main reaction&lt;/a&gt;
was to suggest that open source publishers should impose whatever support
limitations they need to impose to make their ongoing maintenance efforts
personally sustainable. That means that if supporting older iterations of
provisional APIs is a pain, then they should only be supported if the project
developers themselves need that, or if somebody is paying them for the
inconvenience. This is similar to my view on whether or not volunteer-driven
projects should support older commercial LTS Python releases for free when it's
a hassle for them to do: I &lt;a class="reference external" href="http://www.curiousefficiency.org/posts/2015/04/stop-supporting-python26/"&gt;don't think they should&lt;/a&gt;,
as I expect most such demands to be stemming from poorly managed institutional
inertia, rather than from genuine need (and if the need &lt;em&gt;is&lt;/em&gt; genuine, then it
should instead be possible to find some means of paying to have it addressed).&lt;/p&gt;
&lt;p&gt;However, my &lt;a class="reference external" href="https://twitter.com/ncoghlan_dev/status/917088410162012160"&gt;second reaction&lt;/a&gt;,
was to realise that even though I've touched on this topic over the years (e.g.
in the original 2011 article linked above, as well as in Python 3 Q &amp;amp; A answers
&lt;a class="reference external" href="http://python-notes.curiousefficiency.org/en/latest/python3/questions_and_answers.html#wouldn-t-a-python-2-8-release-help-ease-the-transition"&gt;here&lt;/a&gt;,
&lt;a class="reference external" href="http://python-notes.curiousefficiency.org/en/latest/python3/questions_and_answers.html#doesn-t-this-make-python-look-like-an-immature-and-unstable-platform"&gt;here&lt;/a&gt;,
and &lt;a class="reference external" href="http://python-notes.curiousefficiency.org/en/latest/python3/questions_and_answers.html#what-about-insert-other-shiny-new-feature-here"&gt;here&lt;/a&gt;,
and to a lesser degree in last year's article on the
&lt;a class="reference external" href="http://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/"&gt;Python Packaging Ecosystem&lt;/a&gt;),
I've never really attempted to directly explain the impact it has on the standard
library design process.&lt;/p&gt;
&lt;p&gt;And without that background, some aspects of the design process, such as the
introduction of provisional APIs, or the introduction of
inspired-by-but-not-the-same-as, seem completely nonsensical, as they appear to be an attempt to standardise
APIs without actually standardising them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="where-does-pypi-fit-into-the-picture"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2017/10/considering-pythons-target-audience/#toc-entry-4" role="doc-backlink"&gt;Where does PyPI fit into the picture?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The first hurdle that &lt;em&gt;any&lt;/em&gt; proposal sent to python-ideas or python-dev has to
clear is answering the question "Why isn't a module on PyPI good enough?". The
vast majority of proposals fail at this step, but there are several common
themes for getting past it:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;rather than downloading a suitable third party library, novices may be prone
to copying &amp;amp; pasting bad advice from the internet at large (e.g. this is why
the &lt;code class="docutils literal"&gt;secrets&lt;/code&gt; library now exists: to make it less likely people will use the
&lt;code class="docutils literal"&gt;random&lt;/code&gt; module, which is intended for games and statistical simulations,
for security-sensitive purposes)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the module is intended to provide a reference implementation and to enable
interoperability between otherwise competing implementations, rather than
necessarily being all things to all people (e.g. &lt;code class="docutils literal"&gt;asyncio&lt;/code&gt;, &lt;code class="docutils literal"&gt;wsgiref&lt;/code&gt;,
&lt;code class="docutils literal"&gt;unittest`&lt;/code&gt;, and &lt;code class="docutils literal"&gt;logging&lt;/code&gt; all fall into this category)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the module is intended for use in other parts of the standard library (e.g.
&lt;code class="docutils literal"&gt;enum&lt;/code&gt; falls into this category, as does &lt;code class="docutils literal"&gt;unittest&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the module is designed to support a syntactic addition to the language (e.g.
the &lt;code class="docutils literal"&gt;contextlib&lt;/code&gt;, &lt;code class="docutils literal"&gt;asyncio&lt;/code&gt; and &lt;code class="docutils literal"&gt;typing&lt;/code&gt; modules fall into this
category)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the module is just plain useful for ad hoc scripting purposes (e.g.
&lt;code class="docutils literal"&gt;pathlib&lt;/code&gt;, and &lt;code class="docutils literal"&gt;ipaddress&lt;/code&gt; fall into this category)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the module is useful in an educational context (e.g. the &lt;code class="docutils literal"&gt;statistics&lt;/code&gt;
module allows for interactive exploration of statistic concepts, even if you
wouldn't necessarily want to use it for full-fledged statistical analysis)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Passing this initial "Is PyPI obviously good enough?" check isn't enough to
ensure that a module will be accepted for inclusion into the standard library,
but it's enough to shift the question to become "Would including the proposed
library result in a net improvement to the typical introductory Python software
developer experience over the next few years?"&lt;/p&gt;
&lt;p&gt;The introduction of &lt;code class="docutils literal"&gt;ensurepip&lt;/code&gt; and &lt;code class="docutils literal"&gt;venv&lt;/code&gt; modules into the standard library
also makes it clear to redistributors that we expect Python level packaging
and installation tools to be supported in addition to any platform specific
distribution mechanisms.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="why-are-some-apis-changed-when-adding-them-to-the-standard-library"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2017/10/considering-pythons-target-audience/#toc-entry-5" role="doc-backlink"&gt;Why are some APIs changed when adding them to the standard library?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While existing third party modules are sometimes adopted wholesale into the
standard library, in other cases, what actually gets added is a redesigned
and reimplemented API that draws on the user experience of the existing API,
but drops or revises some details based on the additional design considerations
and privileges that go with being part of the language's reference
implementation.&lt;/p&gt;
&lt;p&gt;For example, unlike its popular third party predecessor, &lt;code class="docutils literal"&gt;path.py`, ``pathlib&lt;/code&gt;
does &lt;em&gt;not&lt;/em&gt; define string subclasses, but instead independent types. Solving
the resulting interoperability challenges led to the definition of the
filesystem path protocol, allowing a wider range of objects to be used with
interfaces that work with filesystem paths.&lt;/p&gt;
&lt;p&gt;The API design for the &lt;code class="docutils literal"&gt;ipaddress&lt;/code&gt; module was adjusted to explicitly
separate host interface definitions (IP addresses associated with particular
IP networks) from the definitions of addresses and networks in order to serve
as a better tool for teaching IP addressing concepts, whereas the original
&lt;code class="docutils literal"&gt;ipaddr&lt;/code&gt; module is less strict in the way it uses networking terminology.&lt;/p&gt;
&lt;p&gt;In other cases, standard library modules are constructed as a synthesis of
multiple existing approaches, and may also rely on syntactic features that
didn't exist when the APIs for pre-existing libraries were defined. Both of
these considerations apply for the &lt;code class="docutils literal"&gt;asyncio&lt;/code&gt; and &lt;code class="docutils literal"&gt;typing&lt;/code&gt; modules,
while the latter consideration applies for the &lt;code class="docutils literal"&gt;dataclasses&lt;/code&gt; API being
considered in PEP 557 (which can be summarised as "like attrs, but using
variable annotations for field declarations").&lt;/p&gt;
&lt;p&gt;The working theory for these kinds of changes is that the existing libraries
aren't going away, and their maintainers often aren't all that interested
in putitng up with the constraints associated with standard library maintenance
(in particular, the relatively slow release cadence). In such cases, it's
fairly common for the documentation of the standard library version to feature
a "See Also" link pointing to the original module, especially if the third
party version offers additional features and flexibility that were omitted
from the standard library module.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="why-are-some-apis-added-in-provisional-form"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2017/10/considering-pythons-target-audience/#toc-entry-6" role="doc-backlink"&gt;Why are some APIs added in provisional form?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While CPython does maintain an API deprecation policy, we generally prefer not
to use it without a compelling justification (this is especially the case
while other projects are attempting to maintain compatibility with Python 2.7).&lt;/p&gt;
&lt;p&gt;However, when adding new APIs that are inspired by existing third party ones
without being exact copies of them, there's a higher than usual risk that some
of the design decisions may turn out to be problematic in practice.&lt;/p&gt;
&lt;p&gt;When we consider the risk of such changes to be higher than usual, we'll mark
the related APIs as provisional, indicating that conservative end users may
want to avoid relying on them at all, and that developers of shared abstraction
layers may want to consider imposing stricter than usual constraints on which
versions of the provisional API they're prepared to support.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="why-are-only-some-standard-library-apis-upgraded"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2017/10/considering-pythons-target-audience/#toc-entry-7" role="doc-backlink"&gt;Why are only some standard library APIs upgraded?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The short answer here is that the main APIs that get upgraded are those where:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;there isn't likely to be a lot of external churn driving additional updates&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;there are clear benefits for either ad hoc scripting use cases or else in
encouraging future interoperability between multiple third party solutions&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;a credible proposal is submitted by folks interested in doing the work&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the limitations of an existing module are mainly noticeable when using the
module for application development purposes (e.g. &lt;code class="docutils literal"&gt;datetime&lt;/code&gt;), if
redistributors already tend to make an improved alternative third party option
readily available (e.g. &lt;code class="docutils literal"&gt;requests&lt;/code&gt;), or if there's a genuine conflict between
the release cadence of the standard library and the needs of the package in
question (e.g. &lt;code class="docutils literal"&gt;certifi&lt;/code&gt;), then the incentives to propose a change to the
standard library version tend to be significantly reduced.&lt;/p&gt;
&lt;p&gt;This is essentially the inverse to the question about PyPI above: since PyPI
usually &lt;em&gt;is&lt;/em&gt; a sufficiently good distribution mechanism for application
developer experience enhancements, it makes sense for such enhancements to be
distributed that way, allowing redistributors and platform providers to make
their own decisions about what they want to include as part of their default
offering.&lt;/p&gt;
&lt;p&gt;Changing CPython and the standard library only comes into play when there is
perceived value in changing the capabilities that can be assumed to be present
by default in 3-5 years time.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="will-any-parts-of-the-standard-library-ever-be-independently-versioned"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2017/10/considering-pythons-target-audience/#toc-entry-8" role="doc-backlink"&gt;Will any parts of the standard library ever be independently versioned?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Yes, it's likely the bundling model used for &lt;code class="docutils literal"&gt;ensurepip&lt;/code&gt; (where CPython
releases bundle a recent version of &lt;code class="docutils literal"&gt;pip&lt;/code&gt; without actually making it part
of the standard library) may be applied to other modules in the future.&lt;/p&gt;
&lt;p&gt;The most probable first candidate for that treatment would be the &lt;code class="docutils literal"&gt;distutils&lt;/code&gt;
build system, as switching to such a model would allow the build system to be
more readily kept consistent across multiple releases.&lt;/p&gt;
&lt;p&gt;Other potential candidates for this kind of treatment would be the Tcl/Tk
graphics bindings, and the IDLE editor, which are already unbundled and turned
into an optional addon installations by a number of redistributors.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="why-do-these-considerations-matter"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2017/10/considering-pythons-target-audience/#toc-entry-9" role="doc-backlink"&gt;Why do these considerations matter?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;By the very nature of things, the folks that tend to be most actively involved
in open source development are those folks working on open source applications
and shared abstraction layers.&lt;/p&gt;
&lt;p&gt;The folks writing ad hoc scripts or designing educational exercises for their
students often won't even think of themselves as software developers - they're
teachers, system administrators, data analysts, quants, epidemiologists,
physicists, biologists, business analysts, market researchers, animators,
graphical designers, etc.&lt;/p&gt;
&lt;p&gt;When all we have to worry about for a language is the application developer
experience, then we can make a lot of simplifying assumptions around what
people know, the kinds of tools they're using, the kinds of development
processes they're following, and the ways they're going to be building and
deploying their software.&lt;/p&gt;
&lt;p&gt;Things get significantly more complicated when an application runtime &lt;em&gt;also&lt;/em&gt;
enjoys broad popularity as a scripting engine. Doing either job well is
already difficult, and balancing the needs of both audiences as part of a single
project leads to frequent incomprehension and disbelief on both sides.&lt;/p&gt;
&lt;p&gt;This post isn't intended to claim that we never make incorrect decisions as part
of the CPython development process - it's merely pointing out that the most
reasonable reaction to seemingly nonsensical feature additions to the Python
standard library is going to be "I'm not part of the intended target audience
for that addition" rather than "I have no interest in that, so it must be a
useless and pointless addition of no value to anyone, added purely to annoy me".&lt;/p&gt;
&lt;/section&gt;</description><category>python</category><guid>https://www.curiousefficiency.org/posts/2017/10/considering-pythons-target-audience/</guid><pubDate>Mon, 09 Oct 2017 01:33:41 GMT</pubDate></item><item><title>The Python Packaging Ecosystem</title><link>https://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/</link><dc:creator>Alyssa Coghlan</dc:creator><description>&lt;nav class="contents" id="from-development-to-deployment" role="doc-toc"&gt;
&lt;p class="topic-title"&gt;From Development to Deployment&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/#my-core-software-ecosystem-design-philosophy" id="toc-entry-1"&gt;My core software ecosystem design philosophy&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/#the-key-conundrum" id="toc-entry-2"&gt;The key conundrum&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/#platform-management-or-plugin-management" id="toc-entry-3"&gt;Platform management or plugin management?&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/#where-do-we-go-next" id="toc-entry-4"&gt;Where do we go next?&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/#sustainability-and-the-bystander-effect" id="toc-entry-5"&gt;Sustainability and the bystander effect&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/#migrating-pypi-to-pypi-org" id="toc-entry-6"&gt;Migrating PyPI to pypi.org&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/#making-the-presence-of-a-compiler-on-end-user-systems-optional" id="toc-entry-7"&gt;Making the presence of a compiler on end user systems optional&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/#bootstrapping-dependency-management-tools-on-end-user-systems" id="toc-entry-8"&gt;Bootstrapping dependency management tools on end user systems&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/#making-the-use-of-distutils-and-setuptools-optional" id="toc-entry-9"&gt;Making the use of distutils and setuptools optional&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/#making-pypi-security-independent-of-ssl-tls" id="toc-entry-10"&gt;Making PyPI security independent of SSL/TLS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/#automating-wheel-creation" id="toc-entry-11"&gt;Automating wheel creation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;p&gt;There have been a few recent articles reflecting on the current status of
the Python packaging ecosystem from an end user perspective, so it seems
worthwhile for me to write-up my perspective as one of the lead architects
for that ecosystem on how I characterise the overall problem space of software
publication and distribution, where I think we are at the moment, and where I'd
like to see us go in the future.&lt;/p&gt;
&lt;p&gt;For context, the specific articles I'm replying to are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://glyph.twistedmatrix.com/2016/08/python-packaging.html"&gt;Python Packaging is Good Now&lt;/a&gt; (Glyph Lefkowitz)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://jakevdp.github.io/blog/2016/08/25/conda-myths-and-misconceptions/"&gt;Conda: Myths and Misconceptions&lt;/a&gt; (Jake VanderPlas)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.paypal-engineering.com/2016/09/07/python-packaging-at-paypal/"&gt;Python Packaging at PayPal&lt;/a&gt; (Mahmoud Hashemi)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are all excellent pieces considering the problem space from different
perspectives, so if you'd like to learn more about the topics I cover here,
I highly recommend reading them.&lt;/p&gt;
&lt;section id="my-core-software-ecosystem-design-philosophy"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/#toc-entry-1" role="doc-backlink"&gt;My core software ecosystem design philosophy&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Since it heavily influences the way I think about packaging system design in
general, it's worth stating my core design philosophy explicitly:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;As a software consumer, I should be able to consume libraries, frameworks,
and applications in the binary format of my choice, regardless of whether
or not the relevant software publishers directly publish in that format&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As a software publisher working in the Python ecosystem, I should be able to
publish my software once, in a single source-based format, and have it be
automatically consumable in any binary format my users care to use&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is emphatically &lt;em&gt;not&lt;/em&gt; the way many software packaging systems work - for a
great many systems, the publication format and the consumption format are
tightly coupled, and the folks managing the publication format or the
consumption format actively seek to use it as a lever of control over a
commercial market (think operating system vendor controlled application stores,
especially for mobile devices).&lt;/p&gt;
&lt;p&gt;While we're unlikely to ever pursue the specific design documented in the
rest of the PEP (hence the "Deferred" status), the
"&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0426/#development-distribution-and-deployment-of-python-software"&gt;Development, Distribution, and Deployment of Python Software&lt;/a&gt;"
section of PEP 426 provides additional details on how this philosophy applies
in practice.&lt;/p&gt;
&lt;p&gt;I'll also note that while I now work on software supply chain management
tooling at Red Hat, that &lt;em&gt;wasn't&lt;/em&gt; the case when I first started actively
participating in the upstream Python packaging ecosystem
&lt;a class="reference external" href="https://lwn.net/Articles/580399/"&gt;design process&lt;/a&gt;. Back then I was working
on Red Hat's main
&lt;a class="reference external" href="https://beaker-project.org/"&gt;hardware integration testing system&lt;/a&gt;, and
growing increasingly frustrated with the level of effort involved in
integrating new Python level dependencies into Beaker's RPM based development
and deployment model. Getting actively involved in tackling these problems on
the Python upstream side of things then led to also getting more actively
involved in addressing them on the
&lt;a class="reference external" href="http://www.slideshare.net/ncoghlan_dev/developing-in-python-on-red-hat-platforms-devnation-2016"&gt;Red Hat downstream side&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-key-conundrum"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/#toc-entry-2" role="doc-backlink"&gt;The key conundrum&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When talking about the design of software packaging ecosystems, it's very easy
to fall into the trap of only considering  the "direct to peer developers" use
case, where the software consumer we're attempting to reach is another developer
working in the same problem domain that we are, using a similar set of
development tools. Common examples of this include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Linux distro developers publishing software for use by other contributors to
the same Linux distro ecosystem&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web service developers publishing software for use by other web service
developers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data scientists publishing software for use by other data scientists&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In these more constrained contexts, you can frequently get away with using a
single toolchain for both publication and consumption:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Linux: just use the system package manager for the relevant distro&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web services: just use the Python Packaging Authority's twine for publication
and pip for consumption&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Data science: just use conda for everything&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For newer languages that start in one particular domain with a preferred
package manager and expand outwards from there, the apparent simplicity arising
from this homogeneity of use cases may frequently be attributed as an essential
property of the design of the package manager, but that perception of inherent
simplicity will typically fade if the language is able to successfully expand
beyond the original niche its default package manager was designed to handle.&lt;/p&gt;
&lt;p&gt;In the case of Python, for example, distutils was designed as a consistent
build interface for Linux distro package management, setuptools for plugin
management in the Open Source Application Foundation's Chandler project, pip
for dependency management in web service development, and conda for local
language-independent environment management in data science.
distutils and setuptools haven't fared especially well from a usability
perspective when pushed beyond their original design parameters (hence the
current efforts to make it easier to use full-fledged build systems like
Scons and Meson as an alternative when publishing Python packages), while pip
and conda both seem to be doing a better job of accommodating increases in
their scope of application.&lt;/p&gt;
&lt;p&gt;This history helps illustrate that where things really have the potential to
get complicated (even beyond the inherent challenges of domain-specific
software distribution) is when you start needing to &lt;em&gt;cross domain boundaries&lt;/em&gt;.
For example, as the lead maintainer of &lt;code class="docutils literal"&gt;contextlib&lt;/code&gt; in the Python
standard library, I'm also the maintainer of the &lt;code class="docutils literal"&gt;contextlib2&lt;/code&gt; backport
project on PyPI. That's not a domain specific utility - folks may need it
regardless of whether they're using a self-built Python runtime, a pre-built
Windows or Mac OS X binary they downloaded from python.org, a pre-built
binary from a Linux distribution, a CPython runtime from some other
redistributor (homebrew, pyenv, Enthought Canopy, ActiveState,
Continuum Analytics, AWS Lambda, Azure Machine Learning, etc), or perhaps even
a different Python runtime entirely (PyPy, PyPy.js, Jython, IronPython,
MicroPython, VOC, Batavia, etc).&lt;/p&gt;
&lt;p&gt;Fortunately for me, I &lt;em&gt;don't&lt;/em&gt; need to worry about all that complexity in the
wider ecosystem when I'm specifically wearing my &lt;code class="docutils literal"&gt;contextlib2&lt;/code&gt; maintainer
hat - I just publish an sdist and a universal wheel file to PyPI, and the rest
of the ecosystem has everything it needs to take care of redistribution
and end user consumption without any further input from me.&lt;/p&gt;
&lt;p&gt;However, &lt;code class="docutils literal"&gt;contextlib2&lt;/code&gt; is a pure Python project that only depends on the
standard library, so it's pretty much the simplest possible case from a
tooling perspective (the only reason I needed to upgrade from distutils to
setuptools was so I could publish my own wheel files, and the only reason I
haven't switched to using the &lt;em&gt;much&lt;/em&gt; simpler pure-Python-only flit instead of
either of them is that that doesn't yet easily support publishing backwards
compatible setup.py based sdists).&lt;/p&gt;
&lt;p&gt;This means that things get significantly more complex once we start wanting to
use and depend on components written in languages other than Python, so that's
the broader context I'll consider next.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="platform-management-or-plugin-management"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/#toc-entry-3" role="doc-backlink"&gt;Platform management or plugin management?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;When it comes to handling the software distribution problem in general, there
are two main ways of approaching it:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;design a plugin management system that doesn't concern itself with the
management of the application framework that &lt;em&gt;runs&lt;/em&gt; the plugins&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;design a platform component manager that not only manages the plugins
themselves, but &lt;em&gt;also&lt;/em&gt; the application frameworks that run them&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This "plugin manager or platform component manager?" question shows up over and
over again in software distribution architecture designs, but the case of most
relevance to Python developers is in the contrasting approaches that pip and
conda have adopted to handling the problem of external dependencies for Python
projects:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;pip is a &lt;em&gt;plugin manager&lt;/em&gt; for Python runtimes. Once you have a Python runtime
(any Python runtime), pip can help you add pieces to it. However, by design,
it won't help you manage the underlying Python runtime (just as it wouldn't
make any sense to try to install Mozilla Firefox as a Firefox Add-On, or
Google Chrome as a Chrome Extension)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;conda, by contrast, is a &lt;em&gt;component manager&lt;/em&gt; for a cross-platform platform
that provides its own Python runtimes (as well as runtimes for other
languages). This means that you can get &lt;em&gt;pre-integrated&lt;/em&gt; components, rather
than having to do your own integration between plugins obtained via pip and
language runtimes obtained via other means&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What this means is that pip, &lt;em&gt;on its own&lt;/em&gt;, is not in any way a direct
alternative to conda. To get comparable capabilities to those offered by conda,
you have to add in a mechanism for obtaining the underlying language runtimes,
which means the alternatives are combinations like:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;apt-get + pip&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dnf + pip&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;yum + pip&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pyenv + pip&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;homebrew (Mac OS X) + pip&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;python.org Windows installer + pip&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enthought Canopy&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ActiveState's Python runtime + PyPM&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the main reason why "just use conda" is excellent advice to any
prospective Pythonista that isn't already using one of the platform component
managers mentioned above: giving that answer replaces an otherwise operating
system dependent or Python specific answer to the runtime management problem
with a cross-platform and (at least somewhat) language neutral one.&lt;/p&gt;
&lt;p&gt;It's an especially good answer for Windows users, as chocalatey/OneGet/Windows
Package Management isn't remotely comparable to pyenv or homebrew at this point
in time, other runtime managers don't work on Windows, and getting folks
bootstrapped with MinGW, Cygwin or the new (still experimental) Windows
Subsystem for Linux is just another hurdle to place between them and whatever
goal they're learning Python for in the first place.&lt;/p&gt;
&lt;p&gt;However, conda's pre-integration based approach to tackling the external
dependency problem is also why "just use conda for everything" isn't a
sufficient answer for the Python software ecosystem as a whole.&lt;/p&gt;
&lt;p&gt;If you're working on an operating system component for Fedora, Debian, or any
other distro, you actually &lt;em&gt;want&lt;/em&gt; to be using the system provided Python
runtime, and hence need to be able to readily convert your upstream Python
dependencies into policy compliant system dependencies.&lt;/p&gt;
&lt;p&gt;Similarly, if you're wanting to support folks that deploy to a preconfigured
Python environment in services like AWS Lambda, Azure Cloud Functions, Heroku,
OpenShift or Cloud Foundry, or that use alternative Python runtimes like PyPy
or MicroPython, then you need a publication technology that doesn't tightly
couple your releases to a specific version of the underlying language runtime.&lt;/p&gt;
&lt;p&gt;As a result, pip and conda end up existing at slightly different points in the
system integration pipeline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Publishing and consuming Python software with pip is a matter of "bring your
own Python runtime". This has the benefit that you &lt;em&gt;can&lt;/em&gt; readily bring your
own runtime (and manage it using whichever tools make sense for your use
case), but also has the downside that you &lt;em&gt;must&lt;/em&gt; supply your own runtime
(which can sometimes prove to be a significant barrier to entry for new
Python users, as well as being a pain for cross-platform environment
management).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Like Linux system package managers before it, conda takes away the
requirement to supply your own Python runtime by providing one for you.
This is great if you don't have any particular preference as to which
runtime you want to use, but if you &lt;em&gt;do&lt;/em&gt; need to use a different runtime
for some reason, you're likely to end up fighting against the tooling, rather
than having it help you. (If you're tempted to answer "Just add another
interpreter to the pre-integrated set!" here, keep in mind that doing so
without the aid of a runtime independent plugin manager like pip acts as a
&lt;em&gt;multiplier&lt;/em&gt; on the platform level integration testing needed, which can be a
significant cost even when it's automated)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="where-do-we-go-next"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/#toc-entry-4" role="doc-backlink"&gt;Where do we go next?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In case it isn't already clear from the above, I'm largely happy with the
respective niches that pip and conda are carving out for themselves as a
plugin manager for Python runtimes and as a cross-platform platform focused
on (but not limited to) data analysis use cases.&lt;/p&gt;
&lt;p&gt;However, there's still plenty of scope to improve the effectiveness of the
collaboration between the upstream Python Packaging Authority and downstream
Python redistributors, as well as to reduce barriers to entry for participation
in the ecosystem in general, so I'll go over some of the key areas I see for
potential improvement.&lt;/p&gt;
&lt;section id="sustainability-and-the-bystander-effect"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/#toc-entry-5" role="doc-backlink"&gt;Sustainability and the bystander effect&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It's not a secret that the core PyPA infrastructure (PyPI, pip, twine,
setuptools) is
&lt;a class="reference external" href="https://caremad.io/posts/2016/05/powering-pypi/"&gt;nowhere near as well-funded&lt;/a&gt;
as you might expect given its criticality to the operations of some truly
enormous organisations.&lt;/p&gt;
&lt;p&gt;The biggest impact of this is that even when volunteers show up ready and
willing to work, there may not be anybody in a position to effectively &lt;em&gt;wrangle&lt;/em&gt;
those volunteers, and help keep them collaborating effectively and moving in a
productive direction.&lt;/p&gt;
&lt;p&gt;To secure long term sustainability for the core Python packaging infrastructure,
we're only talking amounts on the order of a few hundred thousand dollars a
year - enough to cover some dedicated operations and publisher support staff for
PyPI (freeing up the volunteers currently handling those tasks to help work on
ecosystem improvements), as well as to fund targeted development directed at
some of the other problems described below.&lt;/p&gt;
&lt;p&gt;However, rather than being a true
"&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Tragedy_of_the_commons"&gt;tragedy of the commons&lt;/a&gt;",
I personally chalk this situation up to a different human cognitive bias: the
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Bystander_effect"&gt;bystander effect&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The reason I think that is that we have &lt;em&gt;so many&lt;/em&gt; potential sources of the
necessary funding that even folks that agree there's a problem that needs to be
solved are assuming that someone else will take care of it, without actually
checking whether or not that assumption is entirely valid.&lt;/p&gt;
&lt;p&gt;The primary responsibility for correcting that oversight falls squarely on the
Python Software Foundation, which is why the Packaging Working Group was
formed in order to investigate possible sources of additional funding, as well
as to determine how any such funding can be spent most effectively.&lt;/p&gt;
&lt;p&gt;However, a secondary responsibility also falls on customers and staff of
commercial Python redistributors, as this is &lt;em&gt;exactly&lt;/em&gt; the kind of ecosystem
level risk that commercial redistributors are being paid to manage on behalf of
their customers, and they're currently not handling this particular situation
very well. Accordingly, anyone that's actually &lt;em&gt;paying&lt;/em&gt; for CPython, pip, and
related tools (either directly or as a component of a larger offering), and
expecting them to be supported properly as a result, really needs to be asking
some very pointed question of their suppliers right about now. (Here's a sample
question: "We pay you X dollars a year, and the upstream Python ecosystem is
one of the things we expect you to support with that revenue. How much of what
we pay you goes towards maintenance of the upstream Python packaging
infrastructure that we rely on every day?").&lt;/p&gt;
&lt;p&gt;One key point to note about the current situation is that as a 501(c)(3) public
interest charity, any work the PSF funds will be directed towards better
fulfilling that public interest mission, and that means focusing primarily on
the needs of educators and non-profit organisations, rather than those of
private for-profit entities.&lt;/p&gt;
&lt;p&gt;Commercial redistributors are thus &lt;em&gt;far&lt;/em&gt; better positioned to properly
represent their customers interests in areas where their priorities may
diverge from those of the wider community (closing the "insider threat"
loophole in PyPI's current security model is a particular case that comes to
mind - see &lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/#making-pypi-security-independent-of-ssl-tls"&gt;Making PyPI security independent of SSL/TLS&lt;/a&gt;).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="migrating-pypi-to-pypi-org"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/#toc-entry-6" role="doc-backlink"&gt;Migrating PyPI to pypi.org&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;An instance of the new PyPI implementation (Warehouse) is up and running at
&lt;a class="reference external" href="https://pypi.org/"&gt;https://pypi.org/&lt;/a&gt; and connected directly to the
production PyPI database, so folks can already explicitly opt-in to using it
over the legacy implementation if they prefer to do so.&lt;/p&gt;
&lt;p&gt;However, there's still a non-trivial amount of design, development and QA work
needed on the new version before all existing traffic can be transparently
switched over to using it.&lt;/p&gt;
&lt;p&gt;Getting at least this step appropriately funded and a clear project management
plan in place is the main current focus of the PSF's Packaging Working Group.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="making-the-presence-of-a-compiler-on-end-user-systems-optional"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/#toc-entry-7" role="doc-backlink"&gt;Making the presence of a compiler on end user systems optional&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Between the &lt;code class="docutils literal"&gt;wheel&lt;/code&gt; format and the &lt;code class="docutils literal"&gt;manylinux1&lt;/code&gt; usefully-distro-independent
ABI definition, this is largely handled now, with &lt;code class="docutils literal"&gt;conda&lt;/code&gt; available as an
option to handle the relatively small number of cases that are still a problem
for &lt;code class="docutils literal"&gt;pip&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The main unsolved problem is to allow projects to properly express the
constraints they place on target environments so that issues can be detected
at install time or repackaging time, rather than only being detected as
runtime failures. Such a feature will also greatly expand the ability to
correctly generate platform level dependencies when converting Python
projects to downstream package formats like those used by conda and Linux
system package managers.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="bootstrapping-dependency-management-tools-on-end-user-systems"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/#toc-entry-8" role="doc-backlink"&gt;Bootstrapping dependency management tools on end user systems&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With pip being bundled with recent versions of CPython (including CPython 2.7
maintenance releases), and pip (or a variant like upip) also being bundled with
most other Python runtimes, the ecosystem bootstrapping problem has largely
been addressed for new Python users.&lt;/p&gt;
&lt;p&gt;There are still a few usability challenges to be addressed (like defaulting
to per-user installations when outside a virtual environment, interoperating
more effectively with platform component managers like conda, and providing
an officially supported installation interface that works at the Python prompt
rather than via the operating system command line), but those don't require
the same level of political coordination across multiple groups that was
needed to establish pip as the lowest common denominator approach to
dependency management for Python applications.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="making-the-use-of-distutils-and-setuptools-optional"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/#toc-entry-9" role="doc-backlink"&gt;Making the use of distutils and setuptools optional&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As mentioned above, distutils was designed ~18 years ago as a common interface
for Linux distributions to build Python projects, while setuptools was designed
~12 years ago as a plugin management system for an open source Microsoft
Exchange replacement. While both projects have given admirable service in
their original target niches, and quite a few more besides, their age and
original purpose means they're significantly more complex than what a user
needs if all they want to do is to publish their pure Python library or
framework to the Python Package index.&lt;/p&gt;
&lt;p&gt;Their underlying complexity also makes it incredibly difficult to improve the
problematic state of their documentation, which is split between the legacy
distutils documentation in the CPython standard library and the additional
setuptools specific documentation in the setuptools project.&lt;/p&gt;
&lt;p&gt;Accordingly, what we want to do is to change the way build toolchains for
Python projects are organised to have 3 clearly distinct tiers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;toolchains for pure Python projects&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;toolchains for Python projects with simple C extensions&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;toolchains for C/C++/other projects with Python bindings&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This allows folks to be introduced to simpler tools like flit first, better
enables the development of potential alternatives to setuptools at the second
tier, and supports the use of full-fledged pip-installable build systems like
Scons and Meson at the third tier.&lt;/p&gt;
&lt;p&gt;The first step in this project, defining the &lt;code class="docutils literal"&gt;pyproject.toml&lt;/code&gt; format to allow
declarative specification of the dependencies needed to launch &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt;,
has been implemented, and Daniel Holth's &lt;code class="docutils literal"&gt;enscons&lt;/code&gt; project demonstrates that
that is already sufficient to bootstrap an external build system even without
the later stages of the project.&lt;/p&gt;
&lt;p&gt;Future steps include providing native support for &lt;code class="docutils literal"&gt;pyproject.toml&lt;/code&gt; in &lt;code class="docutils literal"&gt;pip&lt;/code&gt;
and &lt;code class="docutils literal"&gt;easy_install&lt;/code&gt;, as well as defining a declarative approach to invoking
the build system rather than having to run &lt;code class="docutils literal"&gt;setup.py&lt;/code&gt; with the relevant
distutils &amp;amp; setuptools flags.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="making-pypi-security-independent-of-ssl-tls"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/#toc-entry-10" role="doc-backlink"&gt;Making PyPI security independent of SSL/TLS&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;PyPI currently relies entirely on SSL/TLS to protect the integrity of the link
between software publishers and PyPI, and between PyPI and software consumers.
The only protections against insider threats from within the PyPI
administration team are ad hoc usage of GPG artifact signing by some projects,
personal vetting of new team members by existing team members and 3rd party
checks against previously published artifact hashes unexpectedly changing.&lt;/p&gt;
&lt;p&gt;A credible design for end-to-end package signing that adequately accounts for
the significant usability issues that can arise around publisher and consumer
key management has been available for almost 3 years at this point (see
&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0458/"&gt;Surviving a Compromise of PyPI&lt;/a&gt;
and
&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0480/"&gt;Surviving a Compromise of PyPI: the Maximum Security Edition&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;However, implementing that solution has been gated not only on being able to
first retire the legacy infrastructure, but also the PyPI administators being
able to credibly commit to the key management obligations of operating the
signing system, as well as to ensuring that the system-as-implemented actually
provides the security guarantees of the system-as-designed.&lt;/p&gt;
&lt;p&gt;Accordingly, this isn't a project that can realistically be pursued until the
underlying sustainability problems have been suitably addressed.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="automating-wheel-creation"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/#toc-entry-11" role="doc-backlink"&gt;Automating wheel creation&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;While redistributors will generally take care of converting upstream Python
packages into their own preferred formats, the Python-specific wheel format
is currently a case where it is left up to publishers to decide whether or
not to create them, and if they do decide to create them, how to automate that
process.&lt;/p&gt;
&lt;p&gt;Having PyPI take care of this process automatically is an obviously desirable
feature, but it's also an incredibly expensive one to build and operate.&lt;/p&gt;
&lt;p&gt;Thus, it currently makes sense to defer this cost to individual projects, as
there are quite a few commercial continuous integration and continuous
deployment service providers willing to offer free accounts to open source
projects, and these can also be used for the task of producing release
artifacts. Projects also remain free to only publish source artifacts, relying
on pip's implicit wheel creation and caching and the appropriate use of
private PyPI mirrors and caches to meet the needs of end users.&lt;/p&gt;
&lt;p&gt;For downstream platform communities already offering shared build
infrastructure to their members (such as Linux distributions and conda-forge),
it may make sense to offer Python wheel generation as a supported output option
for cross-platform development use cases, in addition to the platform's native
binary packaging format.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;</description><category>python</category><guid>https://www.curiousefficiency.org/posts/2016/09/python-packaging-ecosystem/</guid><pubDate>Sat, 17 Sep 2016 03:46:31 GMT</pubDate></item><item><title>What problem does it solve?</title><link>https://www.curiousefficiency.org/posts/2016/08/what-problem-does-it-solve/</link><dc:creator>Alyssa Coghlan</dc:creator><description>&lt;p&gt;One of the more puzzling aspects of Python for newcomers to the language is the
stark usability differences between the standard library's &lt;code&gt;urllib&lt;/code&gt; module
and the popular (and well-recommended) third party module, &lt;code&gt;requests&lt;/code&gt;, when
it comes to writing HTTP(S) protocol clients. When your problem is
"talk to a HTTP server", the difference in usability isn't immediately obvious,
but it becomes clear as soon as additional requirements like SSL/TLS,
authentication, redirect handling, session management, and JSON request and
response bodies enter the picture.&lt;/p&gt;
&lt;p&gt;It's tempting, and entirely understandable, to want to
&lt;a href="http://noamelf.com/2016/08/05/designing-pythonic-apis/"&gt;chalk this difference&lt;/a&gt;
in ease of use up to &lt;code&gt;requests&lt;/code&gt; being "Pythonic" (in 2016 terms), while &lt;code&gt;urllib&lt;/code&gt;
has now become un-Pythonic (despite being included in the standard library).&lt;/p&gt;
&lt;p&gt;While there are certainly a few elements of that (e.g. the &lt;code&gt;property&lt;/code&gt; builtin
was only added in Python 2.2, while &lt;code&gt;urllib2&lt;/code&gt; was included in the original
Python 2.0 release and hence couldn't take that into account in its API design),
the vast majority of the usability difference relates to an entirely different
question we often forget to ask about the software we use:
&lt;em&gt;What problem does it solve?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;That is, many otherwise surprising discrepancies between &lt;code&gt;urllib&lt;/code&gt;/&lt;code&gt;urllib2&lt;/code&gt;
and &lt;code&gt;requests&lt;/code&gt; are best explained by the fact that they &lt;em&gt;solve different
problems&lt;/em&gt;, and the problems most HTTP client developers have today
are closer to those Kenneth Reitz designed &lt;code&gt;requests&lt;/code&gt; to solve in 2010/2011,
than they are to the problems that Jeremy Hylton was aiming to solve more than
a decade earlier.&lt;/p&gt;
&lt;h3&gt;It's all in the name&lt;/h3&gt;
&lt;p&gt;To quote the current Python 3 &lt;code&gt;urllib&lt;/code&gt; package documentation: "urllib is a
package that collects several modules for working with URLs".&lt;/p&gt;
&lt;p&gt;And the docstring from Jeremy's
&lt;a href="https://hg.python.org/cpython/rev/b800e36aed4e"&gt;original commit message&lt;/a&gt;
adding &lt;code&gt;urllib2&lt;/code&gt; to CPython: "An extensible library for opening URLs using a
variety [of] protocols".&lt;/p&gt;
&lt;p&gt;Wait, what? We're just trying to write a HTTP client, so why is the
documentation talking about working with URLs in general?&lt;/p&gt;
&lt;p&gt;While it may seem strange to developers accustomed to the modern HTTPS+JSON
powered interactive web, it wasn't always clear that that was how things were
going to turn out.&lt;/p&gt;
&lt;p&gt;At the turn of the century, the expectation was instead that we'd retain a
rich variety of data transfer protocols with different characteristics optimised
for different purposes, and that the most useful client to have in the standard
library would be one that could be used to talk to multiple different kinds
of servers (like HTTP, FTP, NFS, etc), without client developers needing to
worry too much about the specific protocol used (as indicated by the URL
schema).&lt;/p&gt;
&lt;p&gt;In practice, things didn't work out that way (mostly due to restrictive
institutional firewalls meaning HTTP servers were the only remote services that
could be accessed reliably), so folks in 2016 are now regularly comparing the
usability of a dedicated HTTP(S)-only client library with a general purpose
URL handling library that needs to be configured to specifically be using
HTTP(S) before you gain access to most HTTP(S) features.&lt;/p&gt;
&lt;p&gt;When it was written, &lt;code&gt;urllib2&lt;/code&gt; was a square peg that was designed to fit into
the square hole of "generic URL processing". By contrast, most modern client
developers are looking for a round peg to fit into the round hole that is
HTTPS+JSON processing - &lt;code&gt;urllib&lt;/code&gt;/&lt;code&gt;urllib2&lt;/code&gt; will fit if you shave the corners
off first, but &lt;code&gt;requests&lt;/code&gt; comes pre-rounded.&lt;/p&gt;
&lt;h3&gt;So why not add requests to the standard library?&lt;/h3&gt;
&lt;p&gt;Answering the not-so-obvious question of "What problem does it solve?" then
leads to a more obvious follow-up question: if the problems that &lt;code&gt;urllib&lt;/code&gt;/
&lt;code&gt;urllib2&lt;/code&gt; were designed to solve are no longer common, while the problems that
&lt;code&gt;requests&lt;/code&gt; solves &lt;em&gt;are&lt;/em&gt; common, why not add &lt;code&gt;requests&lt;/code&gt; to the standard library?&lt;/p&gt;
&lt;p&gt;If I recall correctly, Guido gave in-principle approval to this idea at a
language summit back in 2013 or so (after the &lt;code&gt;requests&lt;/code&gt; 1.0 release), and it's
a fairly common assumption amongst the core development team that either
&lt;code&gt;requests&lt;/code&gt; itself (perhaps as a bundled snapshot of an independently upgradable
component) or a compatible subset of the API with a different implementation
will eventually end up in the standard library.&lt;/p&gt;
&lt;p&gt;However, even putting aside the
&lt;a href="https://github.com/kennethreitz/requests/issues/2424"&gt;misgivings of the requests developers&lt;/a&gt;
about the idea, there are still some non-trivial system integration problems
to solve in getting &lt;code&gt;requests&lt;/code&gt; to a point where it would be acceptable as a
standard library component.&lt;/p&gt;
&lt;p&gt;In particular, one of the things that &lt;code&gt;requests&lt;/code&gt; does to more reliably handle
SSL/TLS certificates in a cross-platform way is to bundle the Mozilla
Certificate Bundle included in the &lt;code&gt;certifi&lt;/code&gt; project. This is a sensible
thing to do by default (due to the difficulties of obtaining reliable access
to system security certificates in a cross-platform way), but it conflicts
with the security policy of the standard library, which specifically aims to
delegate certificate management to the underlying operating system. That policy
aims to address two needs: allowing Python applications access to custom
institutional certificates added to the system certificate store (most notably,
private CA certificates for large organisations), and avoiding adding an
additional certificate store to end user systems that needs to be updated when
the root certificate bundle changes for any other reason.&lt;/p&gt;
&lt;p&gt;These kinds of problems are technically solvable, but they're not fun to solve,
and the folks in a position to help solve them already have a great many other
demands on their time.This means we're not likely to see much in the way of
progress in this area as long as most of the CPython and &lt;code&gt;requests&lt;/code&gt; developers
are pursuing their upstream contributions as a spare time activity, rather than
as something they're specifically employed to do.&lt;/p&gt;</description><category>python</category><guid>https://www.curiousefficiency.org/posts/2016/08/what-problem-does-it-solve/</guid><pubDate>Sat, 06 Aug 2016 11:05:53 GMT</pubDate></item><item><title>Propose a talk for the PyCon Australia Education Seminar!</title><link>https://www.curiousefficiency.org/posts/2016/05/pycon-australia-education-cfp-2016/</link><dc:creator>Alyssa Coghlan</dc:creator><description>&lt;h3&gt;The pitch&lt;/h3&gt;
&lt;div style="float: right"&gt;
  &lt;a href="http://www.oreilly.com/programming/free/python-in-education.csp"&gt;
    &lt;img src="https://www.curiousefficiency.org/files/python-in-education-cover.gif" alt="Python in Education cover"&gt;
   &lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;Involved in Australian education, whether formally or informally?
Making use of Python in your classes, workshops or other activities?
Interested in sharing your efforts with other Australian educators, and with
the developers that create the tools you use? Able to get to the Melbourne
Convention &amp;amp; Exhibition Centre on Friday August 12th, 2016?&lt;/p&gt;
&lt;p&gt;Then please consider submitting a proposal to speak at the Python in Australian
Education seminar at PyCon Australia 2016! More information about the seminar
can be found
&lt;a href="https://2016.pycon-au.org/programme/python_in_education_seminar"&gt;here&lt;/a&gt;,
while details of the submission process are on the main
&lt;a href="https://2016.pycon-au.org/programme/call_for_proposals"&gt;Call for Proposals&lt;/a&gt;
page.&lt;/p&gt;
&lt;p&gt;Submissions close on Sunday May 8th, but may be edited further after submission
(including during the proposal review process based on feedback from reviewers).&lt;/p&gt;
&lt;p&gt;PyCon Australia is a community-run conference, so everyone involved is a
volunteer (organisers, reviewers, and speakers alike), but accepted speakers
are eligible for discounted (or even free) registration, and assistance with
other costs is also available to help ensure the conference doesn't miss out
on excellent presentations due to financial need (for teachers needing to
persuade skeptical school administrators, this assistance may extend to
contributing towards the costs of engaging a substitute teacher for the day).&lt;/p&gt;
&lt;h3&gt;The background&lt;/h3&gt;
&lt;p&gt;At PyCon Australia 2014, James Curran presented an excellent keynote on
&lt;a href="https://www.youtube.com/watch?v=iVv7fCwVbp4"&gt;"Python for Every Child in Australia"&lt;/a&gt;,
covering some of the history of the National Computer Science School, the
development of Australia's National Digital Curriculum (finally approved in
September 2015), and the opportunity this represented to introduce the next
generation of students to computational thinking in general, and Python in
particular.&lt;/p&gt;
&lt;p&gt;Encouraged by both Dr Curran's keynote at PyCon Australia, and Professor Lorena
Barba's
&lt;a href="https://www.youtube.com/watch?v=TWxwKDT88GU"&gt;"If There's Computational Thinking, There's Computational Learning"&lt;/a&gt; keynote at SciPy 2014, it was my honour and privilege
in 2015 not only to invite Carrie Anne Philbin, Education Pioneer at the
UK's Raspberry Pi Foundation, to speak at the main conference (on
&lt;a href="https://www.youtube.com/watch?v=gaFk0Sya_HI"&gt;"Designed for Education: a Python Solution"&lt;/a&gt;),
but also to invite her to keynote the inaugural Python in Australian Education
seminar. With the support of the Python Software Foundation and Code Club
Australia, Carrie Anne joined QSITE's Peter Whitehouse, Code Club Australia's
Kelly Tagalan, and several other local educators, authors and community workshop
organisers to present an informative, inspirational and sometimes challenging
&lt;a href="https://www.youtube.com/playlist?list=PLs4CJRBY5F1I5vuApyUXp6bLWly1E-b0s"&gt;series of talks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For 2016, we have a new location in Melbourne (PyCon Australia has a two year
rotation in each city, and the Education seminar was launched during the
second year in Brisbane), a new co-organiser (Katie Bell of Grok Learning and
the National Computer Science School), and a Call for Proposals and financial
assistance program that are fully integrated with those for the main conference.&lt;/p&gt;
&lt;p&gt;As with the main conference, however, the Python in Australian Education seminar
is designed around the idea of real world practitioners sharing information with
each other about their day to day experiences, what has worked well for them,
and what hasn't, and creating personal connections that can help facilitate
additional collaboration throughout the year.&lt;/p&gt;
&lt;p&gt;So, in addition to encouraging people to submit their own proposals, I'd also
encourage folks to talk to their friends and peers that they'd like to see
presenting, and see if they're interested in participating.&lt;/p&gt;</description><category>pycon-au</category><category>python</category><guid>https://www.curiousefficiency.org/posts/2016/05/pycon-australia-education-cfp-2016/</guid><pubDate>Mon, 02 May 2016 01:29:23 GMT</pubDate></item><item><title>27 languages to improve your Python</title><link>https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/</link><dc:creator>Alyssa Coghlan</dc:creator><description>&lt;nav class="contents" id="languages" role="doc-toc"&gt;
&lt;p class="topic-title"&gt;27 Languages&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/#broadening-our-horizons" id="toc-entry-1"&gt;Broadening our horizons&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/#procedural-programming-c-rust-cython" id="toc-entry-2"&gt;Procedural programming: C, Rust, Cython&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/#object-oriented-data-modelling-java-c-eiffel" id="toc-entry-3"&gt;Object-oriented data modelling: Java, C#, Eiffel&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/#object-oriented-c-derivatives-c-d" id="toc-entry-4"&gt;Object-oriented C derivatives: C++, D&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/#array-oriented-data-processing-matlab-octave-julia" id="toc-entry-5"&gt;Array-oriented data processing: MATLAB/Octave, Julia&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/#statistical-data-analysis-r" id="toc-entry-6"&gt;Statistical data analysis: R&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/#computational-pipeline-modelling-haskell-scala-clojure-f" id="toc-entry-7"&gt;Computational pipeline modelling: Haskell, Scala, Clojure, F#&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/#event-driven-programming-javascript-go-erlang-elixir" id="toc-entry-8"&gt;Event driven programming: JavaScript, Go, Erlang, Elixir&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/#gradual-typing-typescript" id="toc-entry-9"&gt;Gradual typing: TypeScript&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/#dynamic-metaprogramming-hy-ruby" id="toc-entry-10"&gt;Dynamic metaprogramming: Hy, Ruby&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/#pragmatic-problem-solving-lua-php-perl" id="toc-entry-11"&gt;Pragmatic problem solving: Lua, PHP, Perl&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference internal" href="https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/#computational-thinking-scratch-logo" id="toc-entry-12"&gt;Computational thinking: Scratch, Logo&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/nav&gt;
&lt;p&gt;As a co-designer of one of the world's most popular programming languages, one
of the more frustrating behaviours I regularly see (both in the Python community
and in others) is influential people trying to tap into fears of "losing" to
other open source communities as a motivating force for community contributions.
(I'm occasionally guilty of this misbehaviour myself, which makes it even
easier to spot when others are falling into the same trap).&lt;/p&gt;
&lt;p&gt;While learning from the experiences of other programming language communities
is a good thing, fear based approaches to motivating action are seriously
problematic, as they encourage community members to see members of those
other communities as enemies in a competition for contributor attention, rather
than as potential allies in the larger challenge of advancing the state of the
art in software development. It also has the effect of telling folks that enjoy
those other languages that they're not welcome in a community that views them
and their peers as "hostile competitors".&lt;/p&gt;
&lt;p&gt;In truth, we &lt;em&gt;want&lt;/em&gt; there to be a rich smorgasboard of cross platform open
source programming languages to choose from, as programming languages are first
and foremost &lt;em&gt;tools for thinking&lt;/em&gt; - they make it possible for us to convey our
ideas in terms so explicit that even a computer can understand them. If someone
has found a language to use that fits their brain and solves their immediate
problems, &lt;em&gt;that's great&lt;/em&gt;, regardless of the specific language (or languages)
they choose.&lt;/p&gt;
&lt;p&gt;So I have three specific requests for the Python community, and one broader
suggestion. First, the specific requests:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;If we find it necessary to appeal to tribal instincts to motivate action, we
should avoid using tribal fear, and instead aim to use tribal pride.
When we use fear as a motivator, as in phrasings like "If we don't do X,
we're going to lose developer mindshare to language Y", we're deliberately
creating negative emotions in folks freely contributing the results of their
work to the world at large. Relying on tribal pride instead leads to
phrasings like "It's currently really unclear how to solve problem X in
Python. If we look to ecosystem Y, we can see they have a really nice
approach to solving problem X that we can potentially adapt to provide a
similarly nice user experience in Python". Actively emphasising taking pride
in our own efforts, rather than denigrating the efforts of others, helps
promote a culture of continuous learning within the Python community and
also encourages the development of ever improving collaborative
relationships with other communities.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Refrain from adopting attitudes of contempt towards other open source
programming language communities, &lt;em&gt;especially&lt;/em&gt; if those communities have
empowered people to solve their own problems rather than having to wait for
commercial software vendors to deign to address them. Most of the important
problems in the world aren't profitable to solve (as the folks afflicted by
them aren't personally wealthy and don't control institutional funding
decisions), so we should be encouraging and applauding the folks stepping up
to try to solve them, regardless of what we may think of their technology
choices.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If someone we know is learning to program for the first time, and they
choose to learn a language we don't personally like, we should &lt;em&gt;support them
in their choice anyway&lt;/em&gt;. They know what fits &lt;em&gt;their&lt;/em&gt; brain better than we do,
so the right language for us may not be the right language for them. If
they start getting frustrated with their original choice, to the point where
it's demotivating them from learning to program at all, &lt;em&gt;then&lt;/em&gt; it makes sense
to start recommending alternatives. This advice applies even for those of us
involved in improving the tragically bad state of network security: the way
we solve the problem with inherently insecure languages is by improving
operating system sandboxing capabilities, progressively knocking down
barriers to adoption for languages with better native security properties,
and improving the default behaviours of existing languages, not by confusing
beginners with arguments about why their chosen language is a poor choice
from an application security perspective. (If folks are deploying unaudited
software written by beginners to handle security sensitive tasks, it isn't
the folks &lt;em&gt;writing&lt;/em&gt; the software that are the problem, it's the folks
deploying it without performing appropriate due diligence on the provenance
and security properties of that software)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;My broader suggestion is aimed at folks that are starting to encounter the
limits of the core procedural subset of Python and would hence like to start
exploring more of Python's own available "tools for thinking".&lt;/p&gt;
&lt;section id="broadening-our-horizons"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/#toc-entry-1" role="doc-backlink"&gt;Broadening our horizons&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the things we do as part of the Python core development process is to
look at features we appreciate having available in other languages we have
experience with, and see whether or not there is a way to adapt them to be
useful in making Python code easier to both read and write. This means that
learning another programming language that focuses more specifically on a
given style of software development can help improve &lt;em&gt;anyone's&lt;/em&gt; understanding
of that style of programming in the context of Python.&lt;/p&gt;
&lt;p&gt;To aid in such efforts, I've provided a list below of some possible areas for
exploration, and other languages which may provide additional insight into
those areas. Where possible, I've linked to Wikipedia pages rather than
directly to the relevant home pages, as Wikipedia often provides interesting
historical context that's worth exploring when picking up a new programming
language as an educational exercise rather than for immediate practical use.&lt;/p&gt;
&lt;p&gt;While I do know many of these languages personally (and have used several of
them in developing production systems), the full list of recommendations
includes additional languages that I only know indirectly (usually by either
reading tutorials and design documentation, or by talking to folks that I trust
to provide good insight into a language's strengths and weaknesses).&lt;/p&gt;
&lt;p&gt;There are a &lt;a class="reference external" href="https://github.com/mame/quine-relay"&gt;lot of other languages&lt;/a&gt; that could have gone on this list, so the
specific ones listed are a somewhat arbitrary subset based on my own interests
(for example, I'm mainly interested in the dominant Linux, Android and Windows
ecosystems, so I left out the niche-but-profitable Apple-centric Objective-C
and Swift programming languages, and I'm not familiar enough with art-focused
environments like &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Processing_%28programming_language%29"&gt;Processing&lt;/a&gt; to even guess at what learning them might teach
a Python developer). For a more complete list that takes into account factors
beyond what a language might teach you as a developer, IEEE Spectrum's
&lt;a class="reference external" href="http://spectrum.ieee.org/static/interactive-the-top-programming-languages-2015"&gt;annual ranking&lt;/a&gt; of programming language popularity and growth is well worth a
look.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="procedural-programming-c-rust-cython"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/#toc-entry-2" role="doc-backlink"&gt;Procedural programming: C, Rust, Cython&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Python's default execution model is procedural: we start at the top of the main
module and execute it statement by statement. All of Python's support for the
other approaches to data and computational modelling covered below is built
on this procedural foundation.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://en.wikipedia.org/wiki/C_%28programming_language%29"&gt;C&lt;/a&gt; programming language is still the unchallenged ruler of low level
procedural programming. It's the core implementation language for the reference
Python interpreter, and also for the Linux operating system kernel. As a
software developer, learning C is one of the best ways to start learning more
about the underlying hardware that executes software applications - C is often
described as "portable assembly language", and one of the first applications
cross-compiled for any new CPU architecture will be a C compiler&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Rust_%28programming_language%29"&gt;Rust&lt;/a&gt;, by contrast, is a relatively new programming language created by
Mozilla. The reason it makes this list is because Rust aims to take all of the
lessons we've learned as an industry regarding what &lt;em&gt;not&lt;/em&gt; to do in C, and
design a new language that is interoperable with C libraries, offers the same
precise control over hardware usage that is needed in a low level systems
programming language, but uses a different compile time approach to data modelling
and memory management to structurally eliminate many of the common flaws
afflicting C programs (such as buffer overflows, double free errors, null
pointer access, and thread synchronisation problems). I'm an embedded systems
engineer by training and initial professional experience, and Rust is the first
new language I've seen that looks like it may have the potential to scale down
to all of the niches currently dominated by C and custom assembly code.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Cython"&gt;Cython&lt;/a&gt; is also a lower level procedural-by-default language, but unlike
general purpose languages like C and Rust, Cython is aimed specifically at
writing CPython extension modules. To support that goal, Cython is designed as
a Python superset, allowing the programmer to choose when to favour the pure
Python syntax for flexibility, and when to favour Cython's syntax extensions
that make it possible to generate code that is equivalent to native C code in
terms of speed and memory efficiency.&lt;/p&gt;
&lt;p&gt;Learning one of these languages is likely to provide insight into memory
management, algorithmic efficiency, binary interface compatibility, software
portability, and other practical aspects of turning source code into running
systems.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="object-oriented-data-modelling-java-c-eiffel"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/#toc-entry-3" role="doc-backlink"&gt;Object-oriented data modelling: Java, C#, Eiffel&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the main things we need to do in programming is to model the state of
the real world, and offering native syntactic support for object-oriented
programming is one of the most popular approaches for doing that:
structurally grouping data structures, and methods for operating on those
data structures into classes.&lt;/p&gt;
&lt;p&gt;Python itself is deliberately designed so that it is possible to &lt;em&gt;use&lt;/em&gt; the
object-oriented features without first needing to learn to write your own
classes. Not every language adopts that approach - those listed in this section
are ones that consider learning object-oriented design to be a requirement for
using the language at all.&lt;/p&gt;
&lt;p&gt;After a major marketing push by Sun Microsystems in the mid-to-late 1990's,
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Java_%28programming_language%29"&gt;Java&lt;/a&gt; became the default language for teaching introductory computer science
in many tertiary institutions. While it is now being displaced by Python for
many educational use cases, it remains one of the most popular languages for
the development of business applications. There are a range of other languages
that target the common JVM (Java Virtual Machine) runtime, including the
Jython implementation of Python. The Dalvik and ART environments for Android
systems are based on a reimplementation of the Java programming APIs.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/C_Sharp_%28programming_language%29"&gt;C#&lt;/a&gt; is similar in many ways to Java, and emerged as an alternative after Sun
and Microsoft failed to work out their business differences around Microsoft's
Java implementation, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Visual_J%2B%2B"&gt;J++&lt;/a&gt;. Like Java, it's a popular language for the
development of business applications, and there are a range of other languages
that target the shared .NET CLR (Common Language Runtime), including
the IronPython implementation of Python (the core components of the original
IronPython 1.0 implementation were extracted to create the language neutral
.NET Dynamic Language Runtime). For a long time, .NET was a proprietary Windows
specific technology, with &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Mono_%28software%29"&gt;mono&lt;/a&gt; as a cross-platform open source
reimplementation, but Microsoft shifted to an &lt;a class="reference external" href="http://radar.oreilly.com/2015/06/net-open-source.html"&gt;open source ecosystem strategy&lt;/a&gt;
in early 2015.&lt;/p&gt;
&lt;p&gt;Unlike most of the languages in this list, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Eiffel_%28programming_language%29"&gt;Eiffel&lt;/a&gt; isn't one I'd recommend
for practical day-to-day use. Rather, it's one I recommend because learning it
taught &lt;em&gt;me&lt;/em&gt; an incredible amount about good object-oriented design where
"verifiably correct" is a design goal for the application. (Learning Eiffel also
taught me a lot about why "verifiably correct" isn't actually a design goal in
most software development, as verifiably correct software really doesn't cope
well with ambiguity and is entirely unsuitable for cases where you genuinely
don't know the relevant constraints yet and need to leave yourself enough
wiggle room to be able to figure out the finer details through iterative
development).&lt;/p&gt;
&lt;p&gt;Learning one of these languages is likely to provide insight into inheritance
models, design-by-contract, class invariants, pre-conditions, post-conditions,
covariance, contravariance, method resolution order, generic programming, and
various other notions that also apply to Python's type system. There are also
a number of standard library modules and third party frameworks that use this
"visibly object-oriented" design style, such as the &lt;code class="docutils literal"&gt;unittest&lt;/code&gt; and &lt;code class="docutils literal"&gt;logging&lt;/code&gt;
modules, and class-based views in the &lt;code class="docutils literal"&gt;Django&lt;/code&gt; web framework.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="object-oriented-c-derivatives-c-d"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/#toc-entry-4" role="doc-backlink"&gt;Object-oriented C derivatives: C++, D&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One way of using the CPython runtime is as a "C with objects" programming
environment - at its core, CPython is implemented using C's approach to
object-oriented programming, which is to define C &lt;code class="docutils literal"&gt;structs&lt;/code&gt; to hold the data
of interest, and to pass in instances of the struct as the first argument to
functions that then manipulate that data (these are the omnipresent
&lt;code class="docutils literal"&gt;PyObject*&lt;/code&gt; pointers in the CPython C API). This design pattern is
deliberately mirrored at the Python level in the form of the explicit &lt;code class="docutils literal"&gt;self&lt;/code&gt;
and &lt;code class="docutils literal"&gt;cls&lt;/code&gt; arguments to instance methods and class methods.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/C%2B%2B"&gt;C++&lt;/a&gt; is a programming language that aimed to retain full source compatibility
with &lt;code class="docutils literal"&gt;C&lt;/code&gt;, while adding higher level features like native object-oriented
programming support and template based metaprogramming. It's notoriously verbose
and hard to program in (although the 2011 update to the language standard
addressed many of the worst problems), but it's also the language of choice in
many contexts, including 3D modelling graphics engines and cross-platform
application development frameworks like Qt.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://en.wikipedia.org/wiki/D_%28programming_language%29"&gt;D&lt;/a&gt; programming language is also interesting, as it has a similar
relationship to C++ as Rust has to C: it aims to keep most of the desirable
characteristics of C++, while also avoiding many of its problems (like the lack
of memory safety). Unlike Rust, D was not a ground up design of a new
programming language from scratch - instead, D is a close derivative of C++,
and while it isn't a strict C superset as C++ is, it does follow the design
principle that any code that falls into the common subset of C and D must
behave the same way in both languages.&lt;/p&gt;
&lt;p&gt;Learning one of these languages is likely to provide insight into the
complexities of combining higher level language features with the underlying
C runtime model. Learning C++ is also likely to be useful when using Python
to manipulate existing libraries and toolkits written in C++.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="array-oriented-data-processing-matlab-octave-julia"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/#toc-entry-5" role="doc-backlink"&gt;Array-oriented data processing: MATLAB/Octave, Julia&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Array oriented programming is designed to support numerical programming models:
those based on matrix algebra and related numerical methods.&lt;/p&gt;
&lt;p&gt;While Python's standard library doesn't support this directly, array oriented
programming &lt;em&gt;is&lt;/em&gt; taken into account in the language design, with a range of
syntactic and semantic features being added specifically for the benefit of
the third party &lt;a class="reference external" href="https://en.wikipedia.org/wiki/NumPy"&gt;NumPy&lt;/a&gt; library and similarly array-oriented tools.&lt;/p&gt;
&lt;p&gt;In many cases, the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/SciPy"&gt;Scientific Python&lt;/a&gt; stack is adopted as an alternative to
the proprietary &lt;a class="reference external" href="https://en.wikipedia.org/wiki/MATLAB"&gt;MATLAB&lt;/a&gt; programming environment, which is used extensively
for modelling, simulation and numerical data analysis in science and
engineering. &lt;a class="reference external" href="https://en.wikipedia.org/wiki/GNU_Octave"&gt;GNU Octave&lt;/a&gt; is an open source alternative that aims to be
syntactically compatible with MATLAB code, allowing folks to compare and
contrast the two approaches to array-oriented programming.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Julia_%28programming_language%29"&gt;Julia&lt;/a&gt; is another relatively new language, which focuses heavily on array
oriented programming and type-based function overloading.&lt;/p&gt;
&lt;p&gt;Learning one of these languages is likely to provide insight into the
capabilities of the Scientific Python stack, as well as providing opportunities
to explore hardware level parallel execution through technologies like OpenCL
and Nvidia's CUDA, and distributed data processing through ecosystems like
&lt;a class="reference external" href="https://spark.apache.org/"&gt;Apache Spark&lt;/a&gt; and the Python-specific &lt;a class="reference external" href="http://blaze.pydata.org/"&gt;Blaze&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="statistical-data-analysis-r"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/#toc-entry-6" role="doc-backlink"&gt;Statistical data analysis: R&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As access to large data sets has grown, so has demand for capable freely
available analytical tools for processing those data sets. One such tool is
the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/R_%28programming_language%29"&gt;R&lt;/a&gt; programming language, which focuses specifically on statistical data
analysis and visualisation.&lt;/p&gt;
&lt;p&gt;Learning R is likely to provide insight into the statistical analysis
capabilities of the Scientific Python stack, especially the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Pandas_%28software%29"&gt;pandas&lt;/a&gt; data
manipulation library and the &lt;a class="reference external" href="http://stanford.edu/~mwaskom/software/seaborn/"&gt;seaborn&lt;/a&gt; statistical visualisation library.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="computational-pipeline-modelling-haskell-scala-clojure-f"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/#toc-entry-7" role="doc-backlink"&gt;Computational pipeline modelling: Haskell, Scala, Clojure, F#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Object-oriented data modelling and array-oriented data processing focus a lot
of attention on modelling data at rest, either in the form of collections of
named attributes or as arrays of structured data.&lt;/p&gt;
&lt;p&gt;By contrast, functional programming languages emphasise the modelling of data
in motion, in the form of computational flows. Learning at least the basics
of functional programming can help greatly improve the structure of data
transformation operations even in otherwise procedural, object-oriented or
array-oriented applications.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Haskell_%28programming_language%29"&gt;Haskell&lt;/a&gt; is a functional programming language that has had a significant
influence on the design of Python, most notably through the introduction of
&lt;a class="reference external" href="https://docs.python.org/3/whatsnew/2.0.html#list-comprehensions"&gt;list comprehensions&lt;/a&gt; in Python 2.0.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Scala_%28programming_language%29"&gt;Scala&lt;/a&gt; is an (arguably) functional programming language for the JVM that,
together with Java, Python and R, is one of the four primary programming
languages for the Apache Spark data analysis platform. While being designed to
encourage functional programming approaches, Scala's syntax, data model, and
execution model are also designed to minimise barriers to adoption for current
Java programmers (hence the "arguably" - the case can be made that Scala is
better categorised as an object-oriented programming language with strong
functional programming support).&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Clojure"&gt;Clojure&lt;/a&gt; is another functional programming language for the JVM that is
designed as a dialect of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Lisp_%28programming_language%29"&gt;Lisp&lt;/a&gt;. It earns its place in this list by being
the inspiration for the &lt;a class="reference external" href="https://toolz.readthedocs.org/en/latest/heritage.html"&gt;toolz&lt;/a&gt; functional programming toolkit for Python.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/F_Sharp_%28programming_language%29"&gt;F#&lt;/a&gt; isn't a language I'm particularly familiar with myself, but seems worth
noting as the preferred functional programming language for the .NET CLR.&lt;/p&gt;
&lt;p&gt;Learning one of these languages is likely to provide insight into Python's own
computational pipeline modelling tools, including container comprehensions,
generators, generator expressions, the &lt;code class="docutils literal"&gt;functools&lt;/code&gt; and &lt;code class="docutils literal"&gt;itertools&lt;/code&gt; standard
library modules, and third party functional Python toolkits like &lt;a class="reference external" href="https://toolz.readthedocs.org/en/latest/heritage.html"&gt;toolz&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="event-driven-programming-javascript-go-erlang-elixir"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/#toc-entry-8" role="doc-backlink"&gt;Event driven programming: JavaScript, Go, Erlang, Elixir&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Computational pipelines are an excellent way to handle data transformation and
analysis problems, but many problems require that an application run as a
persistent service that &lt;em&gt;waits&lt;/em&gt; for events to occur, and then &lt;em&gt;handles&lt;/em&gt; those
events. In these kinds of services, it is usually essential to be able to handle
multiple events concurrently in order to be able to accommodate multiple users
(or at least multiple actions) at the same time.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/JavaScript"&gt;JavaScript&lt;/a&gt; was originally developed as an event handling language for web
browsers, permitting website developers to respond locally to client side
actions (such as mouse clicks and key presses) and events (such as the page
rendering being completed). It is supported in all modern browsers, and
together with the HTML5 Domain Object Model, has become a de facto standard
for defining the appearance and behaviour of user interfaces.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Go_%28programming_language%29"&gt;Go&lt;/a&gt; was designed by Google as a purpose built language for creating highly
scalable web services, and has also proven to be a very capable language for
developing command line applications. The most interesting aspect of Go from
a programming language design perspective is its use of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Communicating_sequential_processes"&gt;Communicating
Sequential Processes&lt;/a&gt; concepts in its core concurrency model.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Erlang_%28programming_language%29"&gt;Erlang&lt;/a&gt; was designed by Ericsson as a purpose built language for creating
highly reliable telephony switches and similar devices, and is the language
powering the popular &lt;a class="reference external" href="https://en.wikipedia.org/wiki/RabbitMQ"&gt;RabbitMQ&lt;/a&gt; message broker. Erlang uses the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Actor_model"&gt;Actor model&lt;/a&gt;
as its core concurrency primitive, passing messages between threads of
execution, rather than allowing them to share data directly. While I've never
programmed in Erlang myself, my first full-time job involved working with (and
on) an Actor-based concurrency framework for C++ developed by an ex-Ericsson
engineer, as well as developing such a framework myself based on the TSK (Task)
and MBX (Mailbox) primitives in Texas Instrument's lightweight &lt;a class="reference external" href="https://en.wikipedia.org/wiki/TI-RTOS"&gt;DSP/BIOS&lt;/a&gt;
runtime (now known as TI-RTOS).&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Elixir_%28programming_language%29"&gt;Elixir&lt;/a&gt; earns an entry on the list by being a language designed to run on the
Erlang VM that exposes the same concurrency semantics as Erlang, while also
providing a range of additional language level features to help provide a more
well-rounded environment that is more likely to appeal to developers migrating
from other languages like Python, Java, or Ruby.&lt;/p&gt;
&lt;p&gt;Learning one of these languages is likely to provide insight into Python's own
concurrency and parallelism support, including native coroutines, generator
based coroutines, the &lt;code class="docutils literal"&gt;concurrent.futures&lt;/code&gt; and &lt;code class="docutils literal"&gt;asyncio&lt;/code&gt; standard
library modules, third party network service development frameworks like
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Twisted_%28software%29"&gt;Twisted&lt;/a&gt; and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Tornado_%28web_server%29"&gt;Tornado&lt;/a&gt;, the &lt;a class="reference external" href="http://channels.readthedocs.org/en/latest/concepts.html"&gt;channels&lt;/a&gt; concept being introduced to Django,
and the event handling loops in GUI frameworks.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="gradual-typing-typescript"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/#toc-entry-9" role="doc-backlink"&gt;Gradual typing: TypeScript&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;One of the more controversial features that landed in Python 3.5 was the new
&lt;code class="docutils literal"&gt;typing&lt;/code&gt; module, which brings a standard lexicon for gradual typing support
to the Python ecosystem.&lt;/p&gt;
&lt;p&gt;For folks whose primary exposure to static typing is in languages like C,
C++ and Java, this seems like an astoundingly terrible idea (hence the
controversy).&lt;/p&gt;
&lt;p&gt;Microsoft's &lt;a class="reference external" href="https://en.wikipedia.org/wiki/TypeScript"&gt;TypeScript&lt;/a&gt;, which provides gradual typing for JavaScript
applications provides a better illustration of the concept. TypeScript code
compiles to JavaScript code (which then doesn't include any runtime type
checking), and TypeScript annotations for popular JavaScript libraries are
maintained in the dedicated &lt;a class="reference external" href="http://definitelytyped.org/"&gt;DefinitelyTyped&lt;/a&gt; repository.&lt;/p&gt;
&lt;p&gt;As Chris Neugebauer pointed out in his &lt;a class="reference external" href="https://www.youtube.com/watch?v=_PPQLeimyOM"&gt;PyCon Australia presentation&lt;/a&gt;, this is
very similar to the proposed relationship between Python, the &lt;a class="reference external" href="https://github.com/python/typeshed"&gt;typeshed&lt;/a&gt; type
hint repository, and type inference and analysis tools like &lt;a class="reference external" href="http://mypy-lang.org/"&gt;mypy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In essence, both TypeScript and type hinting in Python are ways of writing
particular kinds of tests, either as separate files (just like normal tests),
or inline with the main body of the code (just like type declarations in
statically typed languages). In either case, you run a &lt;em&gt;separate&lt;/em&gt; command to
actually check that the rest of the code is consistent with the available type
assertions (this occurs implicitly as part of the compilation to JavaScript for
TypeScript, and as an entirely optional static analysis task for Python's type
hinting).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="dynamic-metaprogramming-hy-ruby"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/#toc-entry-10" role="doc-backlink"&gt;Dynamic metaprogramming: Hy, Ruby&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A feature folks coming to Python from languages like C, C++, C# and Java often
find disconcerting is the notion that "code is data": the fact that things like
functions and classes are runtime objects that can be manipulated like any
other object.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Hy"&gt;Hy&lt;/a&gt; is a Lisp dialect that runs on both the CPython VM and the PyPy VM. Lisp
dialects take the "code as data" concept to extremes, as Lisp code consists of
nested lists describing the operations to be performed (the name of the language
itself stands for "LISt Processor"). The great strength of Lisp-style languages
is that they make it incredibly easy to write your own domain specific
languages. The great weakness of Lisp-style languages is that they make it
incredibly easy to write your own domain specific languages, which can sometimes
make it difficult to read other people's code.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Ruby_%28programming_language%29"&gt;Ruby&lt;/a&gt; is a language that is similar to Python in many respects, but as a
community is far more open to making use of dynamic metaprogramming features
that are "supported, but not encouraged" in Python. This includes things like
reopening class definitions to add additional methods, and using closures to
implement core language constructs like iteration.&lt;/p&gt;
&lt;p&gt;Learning one of these languages is likely to provide insight into Python's own
dynamic metaprogramming support, including function and class decorators,
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Monkey_patch"&gt;monkeypatching&lt;/a&gt;, the &lt;code class="docutils literal"&gt;unittest.mock&lt;/code&gt; standard library module, and third
party object proxying modules like &lt;a class="reference external" href="http://wrapt.readthedocs.org/en/latest/"&gt;wrapt&lt;/a&gt;. (I'm not aware of any languages to
learn that are likely to provide insight into Python's metaclass system, so if
anyone has any suggestions on that front, please mention them in the comments.
Metaclasses power features like the core type system, abstract base classes,
enumeration types and runtime evaluation of gradual typing expressions)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="pragmatic-problem-solving-lua-php-perl"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/#toc-entry-11" role="doc-backlink"&gt;Pragmatic problem solving: Lua, PHP, Perl&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Popular programming languages don't exist in isolation - they exist as part of
larger ecosystems of redistributors (both commercial and community focused),
end users, framework developers, tool developers, educators and more.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Lua_%28programming_language%29"&gt;Lua&lt;/a&gt; is a popular programming language for embedding in larger applications
as a scripting engine. Significant examples include it being the language
used to write add-ons for the World of Warcraft game client, and it's also
embedded in the RPM utility used by many Linux distributions. Compared to
CPython, a Lua runtime will generally be a tenth of the size, and its weaker
introspection capabilities generally make it easier to isolate from the rest of
the application and the host operating system. A notable contribution from the
Lua community to the Python ecosystem is the adoption of the LuaJIT FFI
(Foreign Function Interface) as the basis of the JIT-friendly &lt;a class="reference external" href="https://cffi.readthedocs.org/en/latest/#goals"&gt;cffi&lt;/a&gt; interface
library for CPython and PyPy.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/PHP"&gt;PHP&lt;/a&gt; is another popular programming language that rose to prominence as the
original "P" in the Linux-Apache-MySQL-PHP &lt;a class="reference external" href="https://en.wikipedia.org/wiki/LAMP_%28software_bundle%29"&gt;LAMP stack&lt;/a&gt;, due to its focus on
producing HTML pages, and its broad availability on early Virtual Private
Server hosting providers. For all the handwringing about conceptual flaws in
various aspects of its design, it's now the basis of several widely popular
open source web services, including the Drupal content management system, the
Wordpress blogging engine, and the MediaWiki engine that powers Wikipedia. PHP
also powers important services like the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Ushahidi"&gt;Ushahidi&lt;/a&gt; platform for crowdsourced
community reporting on distributed events.&lt;/p&gt;
&lt;p&gt;Like PHP, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Perl"&gt;Perl&lt;/a&gt; rose to popularity on the back of Linux. Unlike PHP, which
grew specifically as a web development platform, Perl rose to prominence as
a system administrator's tool, using regular expressions to string together
and manipulate the output of text-based Linux operating system commands. When
&lt;code class="docutils literal"&gt;sh&lt;/code&gt;, &lt;code class="docutils literal"&gt;awk&lt;/code&gt; and &lt;code class="docutils literal"&gt;sed&lt;/code&gt; were no longer up to handling a task, Perl was there
to take over.&lt;/p&gt;
&lt;p&gt;Learning one of these languages isn't likely to provide any great insight into
aesthetically beautiful or conceptually elegant programming language design.
What it &lt;em&gt;is&lt;/em&gt; likely to do is to provide some insight into how programming
language distribution and adoption works in practice, and how much that has to
do with fortuitous opportunities, accidents of history and lowering barriers to
adoption by working with redistributors to be made available by default, rather
than the inherent capabilities of the languages themselves.&lt;/p&gt;
&lt;p&gt;In particular, it may provide insight into the significance of projects like
&lt;a class="reference external" href="http://ckan.org/instances/#"&gt;CKAN&lt;/a&gt;, &lt;a class="reference external" href="https://wiki.openstack.org/wiki/TelcoWorkingGroup"&gt;OpenStack NFV&lt;/a&gt;, &lt;a class="reference external" href="https://www.blender.org/"&gt;Blender&lt;/a&gt;, &lt;a class="reference external" href="http://www.scipy.org/"&gt;SciPy&lt;/a&gt;, &lt;a class="reference external" href="http://openmdao.org/"&gt;OpenMDAO&lt;/a&gt;, &lt;a class="reference external" href="http://esa.github.io/pygmo/"&gt;PyGMO&lt;/a&gt;,
&lt;a class="reference external" href="https://developer.nvidia.com/pycuda"&gt;PyCUDA&lt;/a&gt;, the &lt;a class="reference external" href="https://www.raspberrypi.org/"&gt;Raspberry Pi Foundation&lt;/a&gt; and Python's adoption by a
&lt;a class="reference external" href="https://us.pycon.org/2015/sponsors/"&gt;wide range of commercial organisations&lt;/a&gt;, for securing ongoing
institutional investment in the Python ecosystem.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="computational-thinking-scratch-logo"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/#toc-entry-12" role="doc-backlink"&gt;Computational thinking: Scratch, Logo&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Finally, I fairly regularly get into discussions with functional and
object-oriented programming advocates claiming that those kinds of languages
are just as easy to learn as procedural ones.&lt;/p&gt;
&lt;p&gt;I think the OOP folks have a point if we're talking about teaching through
embodied computing (e.g. robotics), where the objects being modelled in
software have direct real world counterparts the students can touch, like
sensors, motors, and relays.&lt;/p&gt;
&lt;p&gt;For everyone else though, I now have a standard challenge: pick up a cookbook,
translate one of the recipes into the programming language you're claiming is
easy to learn, and then get a student that understands the language the
original cookbook was written in to follow the translated recipe. Most of the
time folks don't need to actually follow through on this - just running it
as a thought experiment is enough to help them realise how much prior knowledge
their claim of "it's easy to learn" is assuming. (I'd love to see academic
researchers perform this kind of study for real though - I'd be genuinely
fascinated to read the results)&lt;/p&gt;
&lt;p&gt;Another way to tackle this problem though is to go learn the languages that
are actually being used to start teaching computational thinking to children.&lt;/p&gt;
&lt;p&gt;One of the most popular of those is &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Scratch_%28programming_language%29"&gt;Scratch&lt;/a&gt;, which uses a drag-and-drop
programming interface to let students manipulate a self-contained graphical
environment, with sprites moving around and reacting to events in that
environment. Graphical environments like Scratch are the programming
equivalent of the picture books we use to help introduce children to reading
and writing.&lt;/p&gt;
&lt;p&gt;This idea of using a special purpose educational language to manipulate a
graphical environment isn't new though, with one of the earliest incarnations
being the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Logo_%28programming_language%29"&gt;Logo&lt;/a&gt; environment created back in the 1960's. In Logo (and similar
environments like Python's own &lt;code class="docutils literal"&gt;turtle&lt;/code&gt; module), the main thing you're
interacting with is a "turtle", which you can instruct to move around and
modify its environment by drawing lines. This way, concepts like command
sequences, repetition, and state (e.g. "pen up", "pen down") can be introduced
in a way that builds on people's natural intuitions ("imagine you're the turtle,
what's going to happen if you turn right 90 degrees?")&lt;/p&gt;
&lt;p&gt;Going back and relearning one of these languages as an experienced programmer
is most useful as a tool for unlearning: the concepts they introduce help
remind us that these are concepts that we take for granted now, but needed to
learn at some point as beginners. When we do that, we're better able to work
effectively with students and other newcomers, as we're more likely to
remember to unpack our chains of logic, including the steps we'd otherwise take
for granted.&lt;/p&gt;
&lt;/section&gt;</description><category>python</category><guid>https://www.curiousefficiency.org/posts/2015/10/languages-to-improve-your-python/</guid><pubDate>Sun, 11 Oct 2015 02:54:39 GMT</pubDate></item><item><title>TCP echo client and server in Python 3.5</title><link>https://www.curiousefficiency.org/posts/2015/07/asyncio-tcp-echo-server/</link><dc:creator>Alyssa Coghlan</dc:creator><description>&lt;p&gt;This is a follow-on from my
&lt;a href="http://www.curiousefficiency.org/posts/2015/07/asyncio-background-calls.html"&gt;previous post&lt;/a&gt;
on Python 3.5's new &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; syntax. Rather than the simple background
timers used in the original post, this one will look at the impact native
coroutine support has on the TCP echo client and server examples from the
&lt;a href="https://docs.python.org/3.4/library/asyncio-stream.html#tcp-echo-client-using-streams"&gt;asyncio documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, we'll recreate the &lt;code&gt;run_in_foreground&lt;/code&gt; helper defined in the previous
post. This helper function makes it easier to work with coroutines from
otherwise synchronous code (like the interactive prompt):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_in_foreground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Runs event loop in current thread until the given task completes&lt;/span&gt;

&lt;span class="sd"&gt;    Returns the result of the task.&lt;/span&gt;
&lt;span class="sd"&gt;    For more complex conditions, combine with asyncio.wait()&lt;/span&gt;
&lt;span class="sd"&gt;    To include a timeout, combine with asyncio.wait_for()&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ensure_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Next we'll define the coroutine for our TCP echo server implementation,
which simply waits to receive up to 100 bytes on each new client connection,
and then sends that data back to the client:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_tcp_echo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;addr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_extra_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'peername'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-&amp;gt; Server received &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt; from &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;addr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;lt;- Server sending: &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drain&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-- Terminating connection on server"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then the client coroutine we'll use to send a message and wait for a
response:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tcp_echo_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'127.0.0.1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                        &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-&amp;gt; Client sending: &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;- Client received: &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-- Terminating connection on client'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We then use our &lt;code&gt;run_in_foreground&lt;/code&gt; helper to interact with these coroutines
from the interactive prompt. First, we start the echo server:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;make_server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle_tcp_echo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'127.0.0.1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;run_in_foreground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;make_server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Conveniently, since this is a coroutine running in the &lt;em&gt;current&lt;/em&gt; thread, rather
than in a different thread, we can retrieve the details of the listening
socket immediately, including the automatically assigned port number:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sockets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;socket.socket fd=6, family=AddressFamily.AF_INET, type=2049, proto=6, laddr=('127.0.0.1', 40796)&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sockets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsockname&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Since we haven't needed to hardcode the port number, if we want to define a
second server, we can easily do that as well:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;make_server2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle_tcp_echo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'127.0.0.1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;server2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;run_in_foreground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;make_server2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;server2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sockets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;socket.socket fd=7, family=AddressFamily.AF_INET, type=2049, proto=6, laddr=('127.0.0.1', 41200)&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;port2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sockets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsockname&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, both of these servers are configured to run directly in the main thread's
event loop, so trying to talk to them using a synchronous client wouldn't work.
The client would block the main thread, and the servers wouldn't be able to
process incoming connections. That's where our asynchronous client coroutine
comes in: if we use &lt;em&gt;that&lt;/em&gt; to send messages to the server, then it doesn't
block the main thread either, and both the client and server coroutines can
process incoming events of interest. That gives the following results:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run_in_foreground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tcp_echo_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello World!'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="go"&gt;-&amp;gt; Client sending: 'Hello World!'&lt;/span&gt;
&lt;span class="go"&gt;-&amp;gt; Server received 'Hello World!' from ('127.0.0.1', 44386)&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;- Server sending: 'Hello World!'&lt;/span&gt;
&lt;span class="go"&gt;-- Terminating connection on server&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;- Client received: 'Hello World!'&lt;/span&gt;
&lt;span class="go"&gt;-- Terminating connection on client&lt;/span&gt;
&lt;span class="go"&gt;Hello World!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note something important here: you will get &lt;em&gt;exactly&lt;/em&gt; that sequence of
output messages, as this is &lt;em&gt;all&lt;/em&gt; running in the interpreter's main thread, in
a deterministic order. If the servers were running in their own threads, we
wouldn't have that property (and reliably getting access to the port numbers
the server components were assigned by the underlying operating system would
also have been far more difficult).&lt;/p&gt;
&lt;p&gt;And to demonstrate both servers are up and running:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;run_in_foreground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tcp_echo_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello World!'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port2&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;span class="go"&gt;-&amp;gt; Client sending: 'Hello World!'&lt;/span&gt;
&lt;span class="go"&gt;-&amp;gt; Server received 'Hello World!' from ('127.0.0.1', 44419)&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;- Server sending: 'Hello World!'&lt;/span&gt;
&lt;span class="go"&gt;-- Terminating connection on server&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;- Client received: 'Hello World!'&lt;/span&gt;
&lt;span class="go"&gt;-- Terminating connection on client&lt;/span&gt;
&lt;span class="go"&gt;Hello World!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That then raises an interesting question: how would we send messages to the
two servers in parallel, while still only using a single thread to manage the
client and server coroutines? For that, we'll need another of our helper
functions from the previous post, &lt;code&gt;schedule_coroutine&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;schedule_coroutine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Schedules target coroutine in the given event loop&lt;/span&gt;

&lt;span class="sd"&gt;    If not given, *loop* defaults to the current thread's event loop&lt;/span&gt;

&lt;span class="sd"&gt;    Returns the scheduled task.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iscoroutine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ensure_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"target must be a coroutine, "&lt;/span&gt;
                    &lt;span class="s2"&gt;"not &lt;/span&gt;&lt;span class="si"&gt;{!r}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;em&gt;As with the previous post, this post originally suggested a
combined "run_in_background" helper function that handled both scheduling
coroutines and calling arbitrary callables in a background thread or process.
On further reflection, I decided that was unhelpfully conflating two different
concepts, so I replaced it with separate "schedule_coroutine" and
"call_in_background" helpers&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;First, we set up the two client operations we want to run in parallel:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;echo1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;schedule_coroutine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tcp_echo_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello World!'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;echo2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;schedule_coroutine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tcp_echo_client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Hello World!'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then we use the &lt;code&gt;asyncio.wait&lt;/code&gt; function in combination with &lt;code&gt;run_in_foreground&lt;/code&gt;
to run the event loop until both operations are complete:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;run_in_foreground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;echo1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;echo2&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="go"&gt;-&amp;gt; Client sending: 'Hello World!'&lt;/span&gt;
&lt;span class="go"&gt;-&amp;gt; Client sending: 'Hello World!'&lt;/span&gt;
&lt;span class="go"&gt;-&amp;gt; Server received 'Hello World!' from ('127.0.0.1', 44461)&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;- Server sending: 'Hello World!'&lt;/span&gt;
&lt;span class="go"&gt;-- Terminating connection on server&lt;/span&gt;
&lt;span class="go"&gt;-&amp;gt; Server received 'Hello World!' from ('127.0.0.1', 44462)&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;- Server sending: 'Hello World!'&lt;/span&gt;
&lt;span class="go"&gt;-- Terminating connection on server&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;- Client received: 'Hello World!'&lt;/span&gt;
&lt;span class="go"&gt;-- Terminating connection on client&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;- Client received: 'Hello World!'&lt;/span&gt;
&lt;span class="go"&gt;-- Terminating connection on client&lt;/span&gt;
&lt;span class="go"&gt;({&amp;lt;Task finished coro=&amp;lt;tcp_echo_client() done, defined at &amp;lt;stdin&amp;gt;:1&amp;gt; result='Hello World!'&amp;gt;, &amp;lt;Task finished coro=&amp;lt;tcp_echo_client() done, defined at &amp;lt;stdin&amp;gt;:1&amp;gt; result='Hello World!'&amp;gt;}, set())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And finally, we retrieve our results using the &lt;code&gt;result&lt;/code&gt; method of the task
objects returned by &lt;code&gt;schedule_coroutine&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;echo1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;'Hello World!'&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;echo2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;'Hello World!'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can set up as many concurrent background tasks as we like, and then use
&lt;code&gt;asyncio.wait&lt;/code&gt; as the foreground task to wait for them all to complete.&lt;/p&gt;
&lt;p&gt;But what if we had an existing blocking client function that we wanted or
needed to use (e.g. we're using an &lt;code&gt;asyncio&lt;/code&gt; server to test a synchronous
client API). To handle that case, we use our third helper function from the
previous post:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call_in_background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;executor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Schedules and starts target callable as a background task&lt;/span&gt;

&lt;span class="sd"&gt;    If not given, *loop* defaults to the current thread's event loop&lt;/span&gt;
&lt;span class="sd"&gt;    If not given, *executor* defaults to the loop's default executor&lt;/span&gt;

&lt;span class="sd"&gt;    Returns the scheduled task.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;callable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_in_executor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;executor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"target must be a callable, "&lt;/span&gt;
                    &lt;span class="s2"&gt;"not &lt;/span&gt;&lt;span class="si"&gt;{!r}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To explore this, we'll need a blocking client, which we can build based on
Python's existing
&lt;a href="https://docs.python.org/3/howto/sockets.html"&gt;socket programming HOWTO guide&lt;/a&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;socket&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tcp_echo_client_sync&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SOCK_STREAM&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-&amp;gt; Client connecting to port: &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;'127.0.0.1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-&amp;gt; Client sending: &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;recv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'&amp;lt;- Client received: &lt;/span&gt;&lt;span class="si"&gt;%r&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-- Terminating connection on client'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can then use &lt;code&gt;functools.partial&lt;/code&gt; in combination with &lt;code&gt;call_in_background&lt;/code&gt; to
start client requests in multiple operating system level threads:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;query_server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tcp_echo_client_sync&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;query_server2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tcp_echo_client_sync&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;bg_call&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;call_in_background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query_server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;-&amp;gt; Client connecting to port: 35876&lt;/span&gt;
&lt;span class="go"&gt;-&amp;gt; Client sending: 'Hello World!'&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;bg_call2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;call_in_background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query_server2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;-&amp;gt; Client connecting to port: 41672&lt;/span&gt;
&lt;span class="go"&gt;-&amp;gt; Client sending: 'Hello World!'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we see that, unlike our coroutine clients, the synchronous clients have
started running immediately in a separate thread. However, because the event
loop isn't currently running in the main thread, they've blocked waiting for
a response from the TCP echo servers. As with the coroutine clients, we
address that by running the event loop in the main thread until our clients
have both received responses:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;run_in_foreground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;bg_call&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bg_call2&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="go"&gt;-&amp;gt; Server received 'Hello World!' from ('127.0.0.1', 52585)&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;- Server sending: 'Hello World!'&lt;/span&gt;
&lt;span class="go"&gt;-- Terminating connection on server&lt;/span&gt;
&lt;span class="go"&gt;-&amp;gt; Server received 'Hello World!' from ('127.0.0.1', 34399)&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;- Server sending: 'Hello World!'&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;- Client received: 'Hello World!'&lt;/span&gt;
&lt;span class="go"&gt;-- Terminating connection on server&lt;/span&gt;
&lt;span class="go"&gt;-- Terminating connection on client&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;- Client received: 'Hello World!'&lt;/span&gt;
&lt;span class="go"&gt;-- Terminating connection on client&lt;/span&gt;
&lt;span class="go"&gt;({&amp;lt;Future finished result='Hello World!'&amp;gt;, &amp;lt;Future finished result='Hello World!'&amp;gt;}, set())&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;bg_call&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;'Hello World!'&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;bg_call2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;'Hello World!'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>python</category><guid>https://www.curiousefficiency.org/posts/2015/07/asyncio-tcp-echo-server/</guid><pubDate>Sat, 11 Jul 2015 06:31:44 GMT</pubDate></item><item><title>Background tasks in Python 3.5</title><link>https://www.curiousefficiency.org/posts/2015/07/asyncio-background-calls/</link><dc:creator>Alyssa Coghlan</dc:creator><description>&lt;p&gt;One of the recurring questions with asyncio is "How do I execute one or two
operations asynchronously in an otherwise synchronous application?"&lt;/p&gt;
&lt;p&gt;Say, for example, I have the following code:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;...&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;0&lt;/span&gt;
&lt;span class="go"&gt;1&lt;/span&gt;
&lt;span class="go"&gt;2&lt;/span&gt;
&lt;span class="go"&gt;3&lt;/span&gt;
&lt;span class="gt"&gt;^CTraceback (most recent call last):&lt;/span&gt;
&lt;span class="x"&gt; File "&amp;lt;stdin&amp;gt;", line 1, in &amp;lt;module&amp;gt;&lt;/span&gt;
&lt;span class="x"&gt; File "&amp;lt;stdin&amp;gt;", line 4, in ticker&lt;/span&gt;
&lt;span class="nc"&gt;KeyboardInterrupt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With the native coroutine syntax coming in Python 3.5, I can change that
synchronous code into event-driven asynchronous code easily enough:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But how do I arrange for that ticker to start running in the background? What's
the coroutine equivalent of appending &lt;code&gt;&amp;amp;&lt;/code&gt; to a shell command?&lt;/p&gt;
&lt;p&gt;It turns out it looks something like this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;asyncio&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;schedule_coroutine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Schedules target coroutine in the given event loop&lt;/span&gt;

&lt;span class="sd"&gt;    If not given, *loop* defaults to the current thread's event loop&lt;/span&gt;

&lt;span class="sd"&gt;    Returns the scheduled task.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iscoroutine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ensure_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"target must be a coroutine, "&lt;/span&gt;
                    &lt;span class="s2"&gt;"not &lt;/span&gt;&lt;span class="si"&gt;{!r}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;em&gt;This post originally suggested a combined "run_in_background"
helper function that handle both scheduling coroutines and calling arbitrary
callables in a background thread or process. On further reflection, I decided
that was unhelpfully conflating two different concepts, so I replaced it with
separate "schedule_coroutine" and "call_in_background" helpers&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So now I can do:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;... &lt;/span&gt;        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="gp"&gt;...&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;ticker1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;schedule_coroutine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;ticker1&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;Task pending coro=&amp;lt;ticker() running at &amp;lt;stdin&amp;gt;:1&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But how do I run that for a while? The event loop won't run unless the current
thread starts it running and either stops when a particular event occurs, or
when explicitly stopped. Another helper function covers that:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_in_foreground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Runs event loop in current thread until the given task completes&lt;/span&gt;

&lt;span class="sd"&gt;    Returns the result of the task.&lt;/span&gt;
&lt;span class="sd"&gt;    For more complex conditions, combine with asyncio.wait()&lt;/span&gt;
&lt;span class="sd"&gt;    To include a timeout, combine with asyncio.wait_for()&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_until_complete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ensure_future&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then I can do:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;run_in_foreground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="go"&gt;0&lt;/span&gt;
&lt;span class="go"&gt;1&lt;/span&gt;
&lt;span class="go"&gt;2&lt;/span&gt;
&lt;span class="go"&gt;3&lt;/span&gt;
&lt;span class="go"&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we can see the background task running while we wait for the foreground
task to complete. And if I do it again with a different timeout:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;run_in_foreground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="go"&gt;5&lt;/span&gt;
&lt;span class="go"&gt;6&lt;/span&gt;
&lt;span class="go"&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We see that the background task picked up again right where it left off
the first time.&lt;/p&gt;
&lt;p&gt;We can also single step the event loop with a zero second sleep (the ticks
reflect the fact there was more than a second delay between running each
command):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;run_in_foreground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="go"&gt;8&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;run_in_foreground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="go"&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And start a second ticker to run concurrently with the first one:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;ticker2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;schedule_coroutine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;ticker2&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;Task pending coro=&amp;lt;ticker() running at &amp;lt;stdin&amp;gt;:1&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;run_in_foreground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="go"&gt;0&lt;/span&gt;
&lt;span class="go"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The asynchronous tickers will happily hang around in the background, ready to
resume operation whenever I give them the opportunity. If I decide I want to
stop one of them, I can cancel the corresponding task:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;ticker1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;True&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;run_in_foreground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="go"&gt;1&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;ticker2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cancel&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="go"&gt;True&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;run_in_foreground&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But what about our original &lt;em&gt;synchronous&lt;/em&gt; ticker? Can I run that as a
background task? It turns out I can, with the aid of another helper function:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call_in_background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;executor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Schedules and starts target callable as a background task&lt;/span&gt;

&lt;span class="sd"&gt;    If not given, *loop* defaults to the current thread's event loop&lt;/span&gt;
&lt;span class="sd"&gt;    If not given, *executor* defaults to the loop's default executor&lt;/span&gt;

&lt;span class="sd"&gt;    Returns the scheduled task.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_event_loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;callable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run_in_executor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;executor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"target must be a callable, "&lt;/span&gt;
                    &lt;span class="s2"&gt;"not &lt;/span&gt;&lt;span class="si"&gt;{!r}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, I haven't figured out how to reliably cancel a task running in a
separate thread or process, so for demonstration purposes, we'll define a
variant of the synchronous version that stops automatically after 5 ticks
rather than ticking indefinitely:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tick_5_sync&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Finishing"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The key difference between scheduling a callable in a background thread and
scheduling a coroutine in the current thread, is that the callable will start
executing immediately, rather than waiting for the current thread
to run the event loop:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;threaded_ticker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;call_in_background&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tick_5_sync&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Starts immediately!"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="go"&gt;0&lt;/span&gt;
&lt;span class="go"&gt;Starts immediately!&lt;/span&gt;
&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="go"&gt;2&lt;/span&gt;
&lt;span class="go"&gt;3&lt;/span&gt;
&lt;span class="go"&gt;4&lt;/span&gt;
&lt;span class="go"&gt;Finishing&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That's both a strength (as you can run multiple blocking IO operations in
parallel), but also a significant weakness - one of the benefits of explicit
coroutines is their predictability, as you know &lt;em&gt;none&lt;/em&gt; of them will start
doing anything until you start running the event loop.&lt;/p&gt;</description><category>python</category><guid>https://www.curiousefficiency.org/posts/2015/07/asyncio-background-calls/</guid><pubDate>Fri, 10 Jul 2015 08:17:53 GMT</pubDate></item><item><title>Inaugural PyCon Australia Education Miniconf</title><link>https://www.curiousefficiency.org/posts/2015/04/pycon-australia-education-miniconf/</link><dc:creator>Alyssa Coghlan</dc:creator><description>&lt;p&gt;PyCon Australia launched its &lt;a href="http://2015.pycon-au.org/cfp"&gt;Call for Papers&lt;/a&gt; just over a month ago, and it closes in a little over a week on Friday the 8th of May.&lt;/p&gt;
&lt;p&gt;A new addition to PyCon Australia this year, and one I'm particularly excited about co-organising following Dr James Curran's &lt;a href="https://www.youtube.com/watch?v=iVv7fCwVbp4&amp;amp;list=PLs4CJRBY5F1JQV44fKjRwjnh3CSTyJvOH&amp;amp;index=2"&gt;"Python for Every Child in Australia"&lt;/a&gt; keynote last year, is the inaugural Python in Education miniconf as a 4th specialist track on the Friday of the conference, before we move into the main program over the weekend.&lt;/p&gt;
&lt;p&gt;From the CFP announcement: &lt;em&gt;"The Python in Education Miniconf aims to bring together community workshop organisers, professional Python instructors and professional educators across primary, secondary and tertiary levels to share their experiences and requirements, and identify areas of potential collaboration with each other and also with the broader Python community."&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If that sounds like you, then I'd love to invite you to head over to the conference website and make your submission to the &lt;a href="http://2015.pycon-au.org/cfp"&gt;Call for Papers&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;This year, all 4 miniconfs (Education, Science &amp;amp; Data Analysis, OpenStack and DjangoCon AU) are running our calls for proposals as part of the main conference CFP - every proposal submitted will be considered for both the main conference and the miniconfs.&lt;/p&gt;
&lt;p&gt;I'm also pleased to announce two pre-arranged sessions at the Education Miniconf:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Carrie Anne Philbin, author of &lt;a href="https://www.raspberrypi.org/carrie-anne-philbins-adventures-in-raspberry-pi/"&gt;"Adventures in Raspberry Pi"&lt;/a&gt; and Education Pioneer at the Raspberry Pi Foundation will be speaking on the Foundation's &lt;a href="https://www.raspberrypi.org/picademy/"&gt;Picademy&lt;/a&gt; professional development program for primary and secondary teachers &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Peter Whitehouse, author of &lt;a href="http://www.wonko.info/ipt/"&gt;IPT - a virtual approach&lt;/a&gt; (online since 1992!) and a longstanding board member of the &lt;a href="https://www.qsite.edu.au/home"&gt;Queensland Society for Information Technology in Education&lt;/a&gt; will provide insight into some of the challenges and opportunities of integrating Python and other open source software into Australian IT education&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm genuinely looking forward to chairing this event, as I see tremendous potential in forging stronger connections between Australian educators (both formal and informal) and the broader Python and open source communities.&lt;/p&gt;</description><guid>https://www.curiousefficiency.org/posts/2015/04/pycon-australia-education-miniconf/</guid><pubDate>Mon, 27 Apr 2015 10:43:14 GMT</pubDate></item><item><title>Accessing TrueCrypt Encrypted Files on Fedora 22</title><link>https://www.curiousefficiency.org/posts/2015/04/fedora-encrypted-volumes/</link><dc:creator>Alyssa Coghlan</dc:creator><description>&lt;p&gt;I recently got a new ultrabook (a HP Spectre 360), which means I finally have enough space to transfer my music files from the external drive where they've been stored for the past few years back to the laptop (there really wasn't enough space for them on my previous laptop, a first generation ASUS Zenbook, but even with the Windows partition still around, the extra storage space on the new device leaves plenty of room for my music collection).&lt;/p&gt;
&lt;p&gt;Just one small problem: the bulk of the storage on that drive was in a TrueCrypt encrypted file, and the Dolphin file browser in KDE doesn't support mounting those as volumes through the GUI (at least, it doesn't as far as I could see).&lt;/p&gt;
&lt;p&gt;So, off to the command line we go. While TrueCrypt itself isn't readily available for Fedora due to problems with its licensing terms, the standard &lt;code&gt;cryptsetup&lt;/code&gt; utility supports accessing existing TrueCrypt volumes, and the &lt;code&gt;tcplay&lt;/code&gt; package also supports creation of new volumes.&lt;/p&gt;
&lt;p&gt;In my case, I just wanted to read the music files, so it turns out that &lt;code&gt;cryptsetup&lt;/code&gt; was all I needed, but I didn't figure that out until after I'd already installed &lt;code&gt;tcplay&lt;/code&gt; as well.&lt;/p&gt;
&lt;p&gt;For both &lt;code&gt;cryptsetup&lt;/code&gt; and &lt;code&gt;tcplay&lt;/code&gt;, one of the things you need to set up in order to access a TrueCrypt encrypted &lt;em&gt;file&lt;/em&gt; (as opposed to a fully encrypted volume) is a loopback device - these let you map a filesystem block device back to a file living on another filesystem. The examples in the &lt;code&gt;tcplay&lt;/code&gt; manual page (&lt;code&gt;man tcplay&lt;/code&gt;) indicated the command I needed to set that up was &lt;code&gt;losetup&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, the &lt;code&gt;losetup&lt;/code&gt; instructions gave me trouble, as they appeared to be telling me I didn't have any loopback devices:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ncoghlan@thechalk ~&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;losetup&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;encrypted&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;file&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nl"&gt;losetup&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;cannot&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;an&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;unused&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;device&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;No&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;such&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;file&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ow"&gt;or&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Searching on Google for "fedora create a loop device" brought me to &lt;a href="http://unix.stackexchange.com/questions/98742/how-to-add-more-dev-loop-devices-on-fedora-19"&gt;this Unix &amp;amp; Linux Stack Exchange question&lt;/a&gt; as the first result, but the answer there struck me as being far too low level to be reasonable as a prerequisite for accessing encrypted files as volumes.&lt;/p&gt;
&lt;p&gt;So I scanned further down through the list of search results, with &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1019440"&gt;this Fedora bug report&lt;/a&gt; about difficulty accessing TrueCrypt volumes catching my eye. As with the Stack Overflow answer, most of the comments there seemed to be about reverting the effect of &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=896160"&gt;a change to Fedora's default behaviour&lt;/a&gt; a change which meant that Fedora no longer came with any loop devices preconfigured.&lt;/p&gt;
&lt;p&gt;However, looking more closely at Kay's original request to trim back the list of default devices revealed an interesting statement: "Loop devices can and should be created on-demand, and only when needed, losetup has been updated since Fedora 17 to do that just fine."&lt;/p&gt;
&lt;p&gt;That didn't match my own experience with the &lt;code&gt;losetup&lt;/code&gt; command, so I wondered what might be going on to explain the discrepancy, which is when it occurred to me that running &lt;code&gt;losetup&lt;/code&gt; with root access might solve the problem. Generally speaking, ordinary users aren't going to have the permissions needed to create new devices, and I'd been running the &lt;code&gt;losetup&lt;/code&gt; command using my normal user permissions rather than running it as &lt;code&gt;root&lt;/code&gt;. That was a fairly straightforward theory to test, and sure enough, that worked:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ncoghlan@thechalk ~&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;losetup&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;path&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;encrypted&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;file&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;loop0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Armed with my new loop device, I was then able to open the TrueCrypt encrypted file on the external GoFlex drive as a decrypted volume:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code literal-block"&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;ncoghlan&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="nx"&gt;thechalk&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sudo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cryptsetup&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;open&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;tcrypt&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;loop0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;flexdecrypted&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Actually supplying the password to decrypt the volume wasn't a problem, as I use a password manager to limit the number of passwords I need to actually &lt;em&gt;remember&lt;/em&gt;, while still being able to use strong passwords for different services and devices.&lt;/p&gt;
&lt;p&gt;However, even with my music files in the process of copying over to my laptop, this all still seemed a bit cryptic to me, even for the Linux command line. It would have saved me a lot of time if I'd been nudged in the direction of "sudo losetup -f" much sooner, rather than having to decide to ignore some bad advice I found on the internet and instead figure out a better answer by way of the Fedora issue tracker.&lt;/p&gt;
&lt;p&gt;So I took four additional steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, I filed &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1215370"&gt;a new issue&lt;/a&gt; against &lt;code&gt;losetup&lt;/code&gt;, suggesting that it nudge the user in the direction of running it with root privileges if they first run it as a normal user and don't find any devices&lt;/li&gt;
&lt;li&gt;Secondly, I followed up on the previous issue I had found in order to &lt;a href="https://bugzilla.redhat.com/show_bug.cgi?id=1019440#c22"&gt;explain my findings&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Thirdly, I added a &lt;a href="http://unix.stackexchange.com/a/198637/61794"&gt;new answer&lt;/a&gt; to the Stack Exchange question I had found, suggesting the use of the higher level &lt;code&gt;losetup&lt;/code&gt; command over the lower level &lt;code&gt;mknod&lt;/code&gt; command&lt;/li&gt;
&lt;li&gt;Finally, I wrote this post recounting the tale of figuring this out from a combination of local system manual pages and online searches&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Adding a right-click option to Dolphin to be able to automatically mount TrueCrypt encrypted files as volumes and open them would be an even nicer solution, but also a whole lot more work. The only actual &lt;em&gt;change&lt;/em&gt; suggested in my above set of additional steps is tweaking a particular error message in one particular situation, which should be far more attainable than a new Dolphin feature or addon.&lt;/p&gt;</description><category>fedora</category><guid>https://www.curiousefficiency.org/posts/2015/04/fedora-encrypted-volumes/</guid><pubDate>Sat, 25 Apr 2015 22:24:15 GMT</pubDate></item></channel></rss>